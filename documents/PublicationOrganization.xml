<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<publication>
   <title>MPLAB® Harmony 3 Motor Control</title>
   <urls>
      <url>
         <loc>GUID-7BBD04D6-F959-4DB3-986C-62130FAEF07C.html</loc>
         <lastmod>2024-09-13T05:47:47</lastmod>
         <title>1 Harmony QSpin Motor Control</title>
         <description>Microchip offers a range of software tools and demonstration projects designed to support motor control development processes. These software tools and demonstration projects are aimed at simplifying ...</description>
         <urls>
            <url>
               <loc>GUID-BC210DD6-B7A6-407F-A3EC-49CFE5DBAC60.html</loc>
               <lastmod>2024-09-11T05:08:28</lastmod>
               <title>1.1 </title>
               <description>This section describes the Harmony QSPIN supported motor control algorithms.</description>
               <urls>
                  <url>
                     <loc>GUID-85BE370F-0541-4589-AA23-E11A372DBE9F.html</loc>
                     <lastmod>2024-09-11T05:21:08</lastmod>
                     <title>1.1.1 Permanent Magnet Synchronous Motors</title>
                     <description>This section describes the field oriented control implementation of permanent magnet synchronous motors (PMSM) and Harmony QSPIN configuration.</description>
                     <urls>
                        <url>
                           <loc>GUID-60DDB34A-7CBA-4DE1-814C-88D432196E35.html</loc>
                           <lastmod>2024-09-11T05:25:00</lastmod>
                           <title>1.1.1.1 PMSM FOC</title>
                           <description/>
                           <urls>
                              <url>
                                 <loc>GUID-5CCF6974-52BB-4407-9796-20C86F178C71.html</loc>
                                 <lastmod>2024-03-19T07:34:54</lastmod>
                                 <title>1.1.1.1.1 Field Oriented Control</title>
                                 <description>The Field Oriented Control (FOC) is the conventional control scheme for permanent-magnet synchronous motors. It generally results in smoother torque, slightly higher efficiency, and higher torque-speed curve, compared to six-step control, but requires a measurement or estimate of rotor position, and is more computationally intensive.</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-C1C929BC-0D12-40FB-B555-F28B23CB457E.html</loc>
                                       <lastmod>2024-03-19T07:33:58</lastmod>
                                       <title>1.1.1.1.1.1 Permanent Magnet Synchronous Motor</title>
                                       <description>The Permanent Magnet Synchronous Motor (PMSM) is the most preferred choice for motor control applications. Due to their permanent magnet rotor, they also have higher torque with smaller frame size and no rotor current, all of which are advantages over AC Induction Motors (AICMs). With their high power-to-size ratio, PMSMs can help make the design smaller without the loss of torque. These strengths enable the usage of PMSM in a broad range of variable frequency drives (VFDs) applications.</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-B0B753AB-03CF-4363-9DF4-3CC3CEF4D84F.html</loc>
                                       <lastmod>2024-03-19T07:35:33</lastmod>
                                       <title>1.1.1.1.1.2 Current Measurement</title>
                                       <description>The phase current information is crucial to control the torque of the motor of an electric drive with Field Oriented Control. The following section describes different current measurement principles in an electric drive, and how it can be configured with Harmony Qspin.</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-85B9E278-D8AE-4132-9904-24D72A113AD7.html</loc>
                                       <lastmod>2024-03-19T07:40:13</lastmod>
                                       <title>1.1.1.1.1.3 Rotor Position Sensing</title>
                                       <description>he rotor position information is crucial to control the torque of the motor of an electric drive with Field Oriented Control. The following section describes different rotor position measurement technique in an electric drive, and how it can be configured with Harmony QSpin.</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-81C3E3D7-9C52-4575-B330-AB618C657300.html</loc>
                                 <lastmod>2024-09-11T06:15:31</lastmod>
                                 <title>1.1.1.1.2 Harmony QSpin: PMSM FOC</title>
                                 <description/>
                                 <urls>
                                    <url>
                                       <loc>GUID-0E28D069-94DC-4B85-967B-CBF9A45BE525.html</loc>
                                       <lastmod>2023-06-27T09:02:24</lastmod>
                                       <title>1.1.1.1.2.1 Getting Started</title>
                                       <description>This section briefly describes the basic steps to get started with theHarmony Qspin. It consists of following steps:</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-65E9E132-9999-4EAE-B258-B9FB4825CFC8.html</loc>
                                             <lastmod>2024-03-19T07:42:13</lastmod>
                                             <title>1.1.1.1.2.1.1 Create a new MPLAB® Harmony v3 project using MCC</title>
                                             <description>This section describes step by step process for creating a new Motor Control Project using MPLAB Code Configurator (MCC) from scratch.</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6EC2A9BD-E456-4FD8-ADDA-87FBC8023291.html</loc>
                                             <lastmod>2024-03-19T07:43:31</lastmod>
                                             <title>1.1.1.1.2.1.2 Qspin Motor Control Configuration</title>
                                             <description>The Harmony Qspin Motor Control is an intuitive graphical tool for developing motor control application software.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-ECF85ABD-803D-4969-8737-C0CA3DBC62EA.html</loc>
                                                   <lastmod>2024-03-19T07:45:38</lastmod>
                                                   <title>1.1.1.1.2.1.2.1 Setting hardware modules</title>
                                                   <description>This section describes how to set-up hardware modules for motor control application project with Harmony QSpin.</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-5CB16768-D98D-45EA-805F-343C7E896621.html</loc>
                                                   <lastmod>2024-03-19T07:46:31</lastmod>
                                                   <title>1.1.1.1.2.1.2.2 Configuring Peripheral Modules</title>
                                                   <description>This section describes how to configure MCU peripherals for motor control application projects with Harmony Qspin.</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E5EED18A-CF3E-4DA4-B210-950FDB8FA076.html</loc>
                                                   <lastmod>2024-03-19T07:48:29</lastmod>
                                                   <title>1.1.1.1.2.1.2.3 Configure software modules</title>
                                                   <description>This section describes how to configure the motor control software modules as per their project requirements.</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-4DD19DCE-B6EF-408C-8574-5B2258EAA616.html</loc>
                                             <lastmod>2024-03-19T07:43:56</lastmod>
                                             <title>1.1.1.1.2.1.3 Generate code with MCC</title>
                                             <description>Click on the generate button to generate the code.</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-35451F85-BBB3-4DF6-B3AC-00FB57657EFF.html</loc>
                                       <lastmod>2024-09-11T06:58:18</lastmod>
                                       <title>1.1.1.1.2.2 Harmony QSpin: PMSM FOC Modules</title>
                                       <description/>
                                       <urls>
                                          <url>
                                             <loc>GUID-BE907C69-DC5C-4438-920A-48EE4B48DD9B.html</loc>
                                             <lastmod>2024-09-11T07:22:12</lastmod>
                                             <title>1.1.1.1.2.2.1 Software Modules</title>
                                             <description/>
                                             <urls>
                                                <url>
                                                   <loc>GUID-2E524004-ED37-4174-9ECC-3075003F70A7.html</loc>
                                                   <lastmod>2024-09-06T08:39:43</lastmod>
                                                   <title>1.1.1.1.2.2.1.1 Start-up Configurator</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-1247DA32-16EE-410F-8821-9996138029EC.html</loc>
                                                   <lastmod>2024-09-11T08:35:33</lastmod>
                                                   <title>1.1.1.1.2.2.1.2 Motor Control and Diagnosis</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-52CA4CA5-55BC-423F-B79E-B814E889984B.html</loc>
                                                   <lastmod>2024-09-11T08:36:58</lastmod>
                                                   <title>1.1.1.1.2.2.1.3 Output Stage</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-D30380EE-7150-40F0-8CD4-972379CEF307.html</loc>
                                                   <lastmod>2024-09-06T08:57:02</lastmod>
                                                   <title>1.1.1.1.2.2.1.4 Current Measurement and Diagnosis</title>
                                                   <description>Current sensing in Field-Oriented Control (FOC) is a critical process that involves measuring the motor's phase currents to accurately control the torque and speed of the motor. For more details ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-01B46490-213A-4272-8195-738256105928.html</loc>
                                                   <lastmod>2024-09-11T08:42:40</lastmod>
                                                   <title>1.1.1.1.2.2.1.5 Voltage Measurement and Diagnosis</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-3FC371D1-5F20-4FD5-BE9C-5E735208822F.html</loc>
                                                   <lastmod>2024-09-11T08:45:01</lastmod>
                                                   <title>1.1.1.1.2.2.1.6 Position Measurement and Diagnosis</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-04C38070-686B-47B2-92B4-277FB5A980FC.html</loc>
                                                   <lastmod>2024-09-11T08:47:19</lastmod>
                                                   <title>1.1.1.1.2.2.1.7 Data Monitoring</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-BB66D816-CABD-4083-B7D9-74C9FE9D061F.html</loc>
                                             <lastmod>2024-09-11T07:09:30</lastmod>
                                             <title>1.1.1.1.2.2.2 Hardware Modules</title>
                                             <description/>
                                             <urls>
                                                <url>
                                                   <loc>GUID-0B134E27-482C-48C3-8895-2AF0AEAFBA99.html</loc>
                                                   <lastmod>2024-09-11T08:53:04</lastmod>
                                                   <title>1.1.1.1.2.2.2.1 Motor Parameters</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls>
                                                      <url>
                                                         <loc>GUID-EA06C12E-C4FB-45A7-B93F-D0B6BB2E181A.html</loc>
                                                         <lastmod>2024-08-12T11:53:30</lastmod>
                                                         <title>1.1.1.1.2.2.2.1.1 pmsm_parameter_identification</title>
                                                         <description>Enter a short description of your topic here (optional).</description>
                                                         <urls/>
                                                      </url>
                                                   </urls>
                                                </url>
                                                <url>
                                                   <loc>GUID-989E7AA5-599B-44EF-B07B-92CF360E8489.html</loc>
                                                   <lastmod>2024-09-11T09:00:08</lastmod>
                                                   <title>1.1.1.1.2.2.2.2 ADC Module</title>
                                                   <description>Enter a short description of your topic here (optional).</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-39CB4463-8D2C-49F3-8335-00B1A0426867.html</loc>
                                                   <lastmod>2024-09-11T09:01:41</lastmod>
                                                   <title>1.1.1.1.2.2.2.3 Voltage Source</title>
                                                   <description>This document provides guidance on setting up the voltage source module with Harmony QSpin. Voltage Source Graphical User Interface Steps for Setup In Harmony QSpin, the voltage source can be set up ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-C90EFA82-CF97-4B03-BC71-6FABB47DD468.html</loc>
                                             <lastmod>2024-09-11T06:33:50</lastmod>
                                             <title>1.1.1.1.2.2.3 Peripheral Interface Modules</title>
                                             <description>This section provides a comprehensive guide on setting up the peripheral modules for your motor control application project using Harmony QSpin. Proper configuration of each peripheral component is ...</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-074A0B6E-2F55-48D4-9597-C94198261D9A.html</loc>
                                                   <lastmod>2024-09-11T09:06:48</lastmod>
                                                   <title>1.1.1.1.2.2.3.1 Setting PWM Interface</title>
                                                   <description>Field-Oriented Control (FOC) involves generating three-phase voltages to create stator flux, which interacts with the rotor flux to produce motor torque. For more details, refer to Field Oriented ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-F357EFE7-06A7-410D-9D17-FBE6A6933412.html</loc>
                                                   <lastmod>2024-08-14T06:25:54</lastmod>
                                                   <title>1.1.1.1.2.2.3.2 Setting Analog Interface</title>
                                                   <description>Field-Oriented Control (FOC) involves controlling the stator currents of a motor to produce a rotating magnetic field, which in turn controls the rotor's position and speed. For more details, refer ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-593B51D7-753B-4F45-907A-9A084230C6CB.html</loc>
                                                   <lastmod>2024-08-14T06:25:40</lastmod>
                                                   <title>1.1.1.1.2.2.3.3 Setting Position Interface</title>
                                                   <description>Field-Oriented Control (FOC) involves the alignment of rotor magnetic flux with respect to the stator's magnetic field. For more details, refer to Field Oriented Control.In sensored FOC, it is ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                       </urls>
                                    </url>
                                 </urls>
                              </url>
                              <url>
                                 <loc>GUID-F8D4D059-6217-4066-BD8B-60DD5B0B9DF3.html</loc>
                                 <lastmod>2023-07-24T09:26:16</lastmod>
                                 <title>1.1.1.1.3 Field Oriented Control Implementation</title>
                                 <description>The generated code from the Harmony QSpin intends to achieve following goals:</description>
                                 <urls/>
                              </url>
                              <url>
                                 <loc>GUID-5D9A13C4-45FC-4744-B788-8853716E4AD8.html</loc>
                                 <lastmod>2024-09-11T06:43:07</lastmod>
                                 <title>1.1.1.1.4 Harmony QSpin API Reference</title>
                                 <description>This section describes the Harmony QSpin API references for the motor control application.</description>
                                 <urls>
                                    <url>
                                       <loc>GUID-722DD900-7015-4646-B69F-20C19A60A801.html</loc>
                                       <lastmod>2024-09-12T11:54:49</lastmod>
                                       <title>1.1.1.1.4.1 Application API Reference</title>
                                       <description>This section describes the API references for the motor control application.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-D22C9F7D-1B8A-466D-999B-9966F5373A83.html</loc>
                                             <lastmod>2024-08-13T09:36:57</lastmod>
                                             <title>1.1.1.1.4.1.1 mcAppI_ApplicationInit</title>
                                             <description>C /* Motor Control Application initialization */ void mcAppI_ApplicationInit( void ) Summary Initialize Motor Control Application Description This function initializes the motor control parameters, ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F8004F01-8DE1-430D-81D2-60D9AB4412C1.html</loc>
                                             <lastmod>2024-07-22T05:30:59</lastmod>
                                             <title>1.1.1.1.4.1.2 mcAppI_ApplicationReset</title>
                                             <description>C /* Application reset */ void mcAppI_ApplicationReset( void ) Summary Resets the Motor Control Application Description This function resets the motor control software modules and initializes the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-5941780D-A35E-4340-B2B6-327A4499AB6E.html</loc>
                                             <lastmod>2024-08-13T09:25:36</lastmod>
                                             <title>1.1.1.1.4.1.3 mcAppI_AdcFinishedIsr</title>
                                             <description>C /* Interrupt tasks execution */ void mcAppI_AdcFinishedIsr( uint32_t status, uintptr_t context ); Summary FOC tasks execution Description This function is specifically designed to execute ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-55B23CE1-53F4-4D3C-8843-2D3146234B06.html</loc>
                                             <lastmod>2024-07-18T06:36:09</lastmod>
                                             <title>1.1.1.1.4.1.4 mcAppI_AdcCalibrationIsr</title>
                                             <description>C /* Motor Control application calibration */ void mcAppI_AdcCalibrationIsr( uint32_t status, uintptr_t context ); Summary Motor phase current offset calibration Description This function is designed ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6774DC6D-FDB0-4AA1-99F5-306B95F83298.html</loc>
                                             <lastmod>2024-07-22T04:58:35</lastmod>
                                             <title>1.1.1.1.4.1.5 mcAppI_1msTasksHandler</title>
                                             <description>C /*1 ms tasks handler */ void mcAppI_1msTasksHandler( void ) Summary Handles tasks to be executed every 1 ms Description This function executes motor control slow loop tasks with a periodicity of 1 ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-8F6EF3ED-5D9F-4C2E-A1B3-AE3AA14B920F.html</loc>
                                             <lastmod>2024-07-22T05:31:49</lastmod>
                                             <title>1.1.1.1.4.1.6 mcAppI_DirectionReverse</title>
                                             <description>C /* Direction reverse button scan */ void mcAppI_DirectionReverse( void ) Summary Reverses motor direction based on button input Description This function scans the direction change button and ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-5045BCD8-FA9F-454C-94EF-F61ED7F98D7A.html</loc>
                                             <lastmod>2024-07-22T05:37:12</lastmod>
                                             <title>1.1.1.1.4.1.7 mcAppI_MotorStartStop</title>
                                             <description>C /* Motor Start/stop button scan */ void mcAppI_MotorStartStop( void ) Summary Controls motor start/stop based on button input Description This function scans the start/stop button and sets the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F403F854-AF20-455B-B252-A62874111430.html</loc>
                                             <lastmod>2024-07-22T05:38:14</lastmod>
                                             <title>1.1.1.1.4.1.8 mcAppI_NonISRTasks</title>
                                             <description>C /* Non-ISR tasks execution */ void mcAppI_NonISRTasks( void ) Summary Executes non-interrupt service routine tasks Description This function executes motor control non-interrupt tasks with a ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-4D6F6A93-87D1-4ADD-B77D-9A427C0E2FE4.html</loc>
                                             <lastmod>2024-09-12T12:01:44</lastmod>
                                             <title>1.1.1.1.4.1.9 mcAppI_OverCurrentReactionIsr</title>
                                             <description>C /* Over current reaction ISR */ void mcAppI_OverCurrentReactionIsr( uint32_t status, uintptr_t context ); Summary Over current reaction ISR Description This function is designed to be called when ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-9305E76E-942D-44E6-9DD2-A6049ABE3323.html</loc>
                                       <lastmod>2024-09-11T10:40:01</lastmod>
                                       <title>1.1.1.1.4.2 Current Measurement API Reference</title>
                                       <description>This section describes the API references for the current measurement module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-578516D0-E8F5-40B9-AC07-AFD67B11773A.html</loc>
                                             <lastmod>2024-09-11T10:44:15</lastmod>
                                             <title>1.1.1.1.4.2.1 mcCurI_CurrentCalculationInit</title>
                                             <description>C /* Current control initialization function */ void mcCurI_CurrentCalculationInit( tmcCur_ModuleData_s * const pModule ) Summary Initialize the Motor phase current calculation function Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-5D2A8B6E-F51B-4AA3-ACB0-59340D90C6EE.html</loc>
                                             <lastmod>2024-07-22T05:49:01</lastmod>
                                             <title>1.1.1.1.4.2.2 mcCurI_CurrentOffsetCalculation</title>
                                             <description>C /* Function to calculate the current sensor offset */ tmcTypes_StdReturn_e mcCurI_CurrentOffsetCalculation( tmcCur_ModuleData_s * const pModule ); Summary Calculates the Motor phase current sensor ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-602BBD41-97CB-4BA2-9BAE-13C156799A9B.html</loc>
                                             <lastmod>2024-07-22T05:41:27</lastmod>
                                             <title>1.1.1.1.4.2.3 mcCurI_CurrentCalculation</title>
                                             <description>C /* Function to calculate the phase currents */ void mcCurI_CurrentCalculation( tmcCur_ModuleData_s * const pModule ) Summary Calculate the Motor phase currents Description This function reads the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-E769C9AE-4561-49CF-AC66-F9D2AB4FB757.html</loc>
                                             <lastmod>2024-07-22T05:47:41</lastmod>
                                             <title>1.1.1.1.4.2.4 mcCurI_CurrentCalculationReset</title>
                                             <description>C /* Function to reset phase current calculation */ void mcCurI_CurrentCalculationReset( tmcCur_ModuleData_s * const pModule ) Summary Resets the current calculation module state and its parameters. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-BAC35AA9-FEA8-4ABC-AB00-FCDD25781FC3.html</loc>
                                             <lastmod>2024-08-06T10:17:29</lastmod>
                                             <title>1.1.1.1.4.2.5 tmcCur_Input_s Struct</title>
                                             <description>C typedef struct { uint16_t iaAdcInput; /* Phase_A ADC input current */ uint16_t ibAdcInput; /* Phase_B ADC input current */ }tmcCur_Input_s; Summary Motor phase currents input structure. Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-FA97B252-9EBB-421C-BD36-03F1C9A30649.html</loc>
                                             <lastmod>2024-08-06T07:19:31</lastmod>
                                             <title>1.1.1.1.4.2.6 tmcCur_Output_s Struct</title>
                                             <description>C typedef struct { tmcTypes_ABC_s iABC; /* A structure containing the calibrated motor phase currents */ uint8_t calibDone; /* A flag indicating the motor phase currents calibation status */ ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-2FCB98D5-D91A-4C48-929B-F1CF00229184.html</loc>
                                             <lastmod>2024-09-05T06:06:00</lastmod>
                                             <title>1.1.1.1.4.2.7 tmcCur_Parameters_s Struct</title>
                                             <description>C /* Structure for current parameters: Floating point version */ typedef struct { float32_t adcToCurrentFactor; /* Factor for converting ADC values to current */ #if MCPMSMFOC_OFFSET_OOR == true ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-52B92668-BB17-4CD7-9C7C-E1DC6A651633.html</loc>
                                             <lastmod>2024-09-05T05:53:20</lastmod>
                                             <title>1.1.1.1.4.2.8 tmcCur_States_s Struct</title>
                                             <description>C /* Structure to hold the current measurement states: Floating point version */ typedef struct { uint8_t calibDone; /* Flag indicating calibration status */ uint16_t adcSampleCounter; /* Counter for ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-05D415E6-5803-4A20-91D5-8693A823D50D.html</loc>
                                             <lastmod>2024-08-12T10:47:27</lastmod>
                                             <title>1.1.1.1.4.2.9 tmcCur_ModuleData_s Struct</title>
                                             <description>C typedef struct { tmcCur_Input_s dInput; /* ADC input parameter structure */ tmcCur_Output_s dOutput; /* Structure for output current data */ tmcCur_Parameters_s dParameters; /* Structure for motor ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-29D06553-EE7F-4EDC-92DF-17C19EE36334.html</loc>
                                       <lastmod>2024-09-12T08:52:06</lastmod>
                                       <title>1.1.1.1.4.3 Field Oriented Control API Reference</title>
                                       <description>This section describes the API references for the field oriented control module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-2109A4FB-BDA2-4CEF-8710-BAD27FA52143.html</loc>
                                             <lastmod>2024-09-04T09:07:03</lastmod>
                                             <title>1.1.1.1.4.3.1 mcFocI_FieldOrientedControlInit</title>
                                             <description>C /* Initializes the FOC module */ void mcFocI_FieldOrientedControlInit( tmcFocI_ModuleData_s * const pModule ) Summary Initialize Field Oriented Control (FOC) module Description This function ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-A282C66C-7BE1-4E91-9785-6D434C5A9B44.html</loc>
                                             <lastmod>2024-09-04T09:06:56</lastmod>
                                             <title>1.1.1.1.4.3.2 mcFocI_FieldOrientedControlEnable</title>
                                             <description>C /* Enable Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlEnable( tmcFocI_ModuleData_s * const pParameters ) Summary Enable Field Oriented Control (FOC) module Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-63CC34B5-204B-4DAA-86A6-CD6E9EDFE07E.html</loc>
                                             <lastmod>2024-07-22T06:24:41</lastmod>
                                             <title>1.1.1.1.4.3.3 mcFocI_FieldOrientedControlSlow</title>
                                             <description>C /*Execute Field Oriented Control (FOC) slow loop */ void mcFocI_FieldOrientedControlSlow( const tmcFocI_ModuleData_s * const pParameters ) Summary Executes the slow loop of the FOC algorithm ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6C1A67BA-B382-4884-B661-AF3F0BA36D3E.html</loc>
                                             <lastmod>2024-07-29T04:26:04</lastmod>
                                             <title>1.1.1.1.4.3.4 mcFocI_FieldOrientedControlFast</title>
                                             <description>C /* Execute Field Oriented Control (FOC) fast loop tasks */ oid mcFocI_FieldOrientedControlFast( tmcFocI_ModuleData_s * const pModule ) Summary Executes the fast loop tasks of the FOC algorithm. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-9B03A001-6B42-4830-A0A1-00C5F3312334.html</loc>
                                             <lastmod>2024-09-04T09:13:27</lastmod>
                                             <title>1.1.1.1.4.3.5 mcFocI_FieldOrientedControlDisable</title>
                                             <description>C /* Disable Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlDisable( tmcFocI_ModuleData_s * const pParameters ) Summary Disable Field Oriented Control (FOC) module Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-585161BC-93F5-4453-8886-661AA9BED607.html</loc>
                                             <lastmod>2024-07-22T07:12:42</lastmod>
                                             <title>1.1.1.1.4.3.6 mcFocI_FieldOrientedControlReset</title>
                                             <description>C /* Reset Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlReset( const tmcFocI_ModuleData_s * const pParameters ) Summary Resets the Field Oriented Control (FOC) module ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-EE6D438E-7394-453E-B326-B9C9CE72A2F6.html</loc>
                                             <lastmod>2024-07-22T06:43:52</lastmod>
                                             <title>1.1.1.1.4.3.7 mcFocI_MotorDirectionChange</title>
                                             <description>C /* Change motor direction */ void mcFocI_MotorDirectionChange(const tmcFocI_ModuleData_s * const pParameters) Summary Changes the direction of the motor Description This function changes the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-92ACB0C5-9954-44B5-8583-47F0E6960A32.html</loc>
                                             <lastmod>2024-07-22T05:49:57</lastmod>
                                             <title>1.1.1.1.4.3.8 mcFoc_ClarkeTransformation</title>
                                             <description>C /* Clarke Transformation */ void mcFoc_ClarkeTransformation( const tmcTypes_ABC_s * pABC, tmcTypes_AlphaBeta_s * const pAlphaBeta ) Summary Clarke Transformation Description This function performs ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-731D588E-F7D0-4AF2-B8DB-6FCE9DBEE75A.html</loc>
                                             <lastmod>2024-08-13T08:41:44</lastmod>
                                             <title>1.1.1.1.4.3.9 mcFoc_ParkTransformation</title>
                                             <description>C /* Floating point Park Transformation */ void mcFoc_ParkTransformation( const tmcTypes_AlphaBeta_s * const pAlphaBeta, const float32_t sine, const float32_t cosine, tmcTypes_DQ_s * const pDQ ) /* ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-9B14E01D-A72F-4969-A64B-4A219642F3C7.html</loc>
                                             <lastmod>2024-08-13T08:48:07</lastmod>
                                             <title>1.1.1.1.4.3.10 mcFoc_InverseParkTransformation</title>
                                             <description>C /* Floating point Inverse Park Transformation */ void mcFoc_InverseParkTransformation( const tmcTypes_DQ_s * const pDQ, const float32_t sine, const float32_t cosine, tmcTypes_AlphaBeta_s * const ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F2BF521F-1F0B-4EF0-9C0B-CC80D86BA5B2.html</loc>
                                             <lastmod>2024-08-07T10:22:51</lastmod>
                                             <title>1.1.1.1.4.3.11 tmcFocI_ModuleData_s Struct</title>
                                             <description>C typedef struct { tmcFoc_Input_s dInput; /* FOC control module input parameter structure */ tmcFoc_Output_s dOutput; /* FOC control module output parameter structure */ tmcFoc_Parameters_s ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-DDC58770-5B56-48BC-845A-0F6B63F6BFEB.html</loc>
                                             <lastmod>2024-09-05T06:15:59</lastmod>
                                             <title>1.1.1.1.4.3.12 tmcFoc_State_s Struct</title>
                                             <description>C /* Data structure for FOC state: Floating point version */ typedef struct { bool enable; /* Flag indicating FOC module enable status */ bool initDone; /* Flag indicating FOC module initialization ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-7C52AFC8-2412-42FB-8DDA-D1FB947D5EE0.html</loc>
                                             <lastmod>2024-08-08T07:28:20</lastmod>
                                             <title>1.1.1.1.4.3.13 tmcFoc_Parameters_s Struct</title>
                                             <description>C typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Structure for Motor parameters */ float32_t potInputToRef; /* Potentiometer to reference value factor */ }tmcFoc_Parameters_s; Summary Field ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-CD3370BD-89F2-4A75-A768-08A01673762C.html</loc>
                                             <lastmod>2024-09-02T11:43:46</lastmod>
                                             <title>1.1.1.1.4.3.14 tmcFoc_Output_s Struct</title>
                                             <description>C /* Data structure for FOC output ports: Floating point version */ typedef struct { tmcTypes_AlphaBeta_s iAlphaBeta; /* Current components in the αβ reference frame */ tmcTypes_AlphaBeta_s ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-EE60D071-FCED-4FD3-82C6-D03A5B366044.html</loc>
                                             <lastmod>2024-09-02T11:42:42</lastmod>
                                             <title>1.1.1.1.4.3.15 tmcFoc_Input_s Struct</title>
                                             <description>C /* Data structure for FOC input ports: Floating point version */ typedef struct { tmcTypes_ABC_s iABC; /* Structure for 3 Phase current parameters */ &lt;#if ( MCPMSMFOC_POSITION_CALC_ALGORITHM == ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-69AE6307-6B26-4028-96A6-DDD234BF3357.html</loc>
                                             <lastmod>2024-08-13T06:30:18</lastmod>
                                             <title>1.1.1.1.4.3.16 tmcFoc_FocState_e Enum</title>
                                             <description>C typedef enum { &lt;#if ( MCPMSMFOC_POSITION_CALC_ALGORITHM != 'SENSORED_ENCODER' ) &amp;&amp; ( MCPMSMFOC_ENABLE_FLYING_START == true ) &gt; FocState_FlyingStart, /* State for flying start */ &lt;/#if&gt; ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-163E3393-AEB0-47C7-B86B-C60C6D6D81E4.html</loc>
                                             <lastmod>2024-07-22T09:09:06</lastmod>
                                             <title>1.1.1.1.4.3.17 ROTOR_ANGLE_RAMP_RATE Macro</title>
                                             <description>C #define ROTOR_ANGLE_RAMP_RATE (float32_t)( 1.0e-5 ) Summary Defines the open loop angle to close loop angle transition rate Description Defines the open loop angle to close loop angle transition ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F2C7364C-E569-4174-871C-98C42227C68B.html</loc>
                                             <lastmod>2024-09-12T08:52:54</lastmod>
                                             <title>1.1.1.1.4.3.18 Flux Control API Reference</title>
                                             <description>This section describes the API references for the flux control module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-07442475-DDE1-418E-BA0B-94B807789185.html</loc>
                                                   <lastmod>2024-07-29T04:23:35</lastmod>
                                                   <title>1.1.1.1.4.3.18.1 mcFlxI_FluxControlInit</title>
                                                   <description>C /* Initialize flux control module */ void mcFlxI_FluxControlInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the flux control module Description This function initializes the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-1CBBC594-C546-4B17-9D91-5B4C8C4F6FBC.html</loc>
                                                   <lastmod>2024-07-24T06:44:07</lastmod>
                                                   <title>1.1.1.1.4.3.18.2 mcFlxI_FluxControlEnable</title>
                                                   <description>C /* Enable flux control module */ void mcFlxI_FluxControlEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the flux control module. Description This function enables the flux control ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-7ACAC663-5EDA-4EB2-AAED-8C5B415E7BF7.html</loc>
                                                   <lastmod>2024-08-13T10:23:04</lastmod>
                                                   <title>1.1.1.1.4.3.18.3 mcFlxI_FluxControlManual</title>
                                                   <description>C /* Floating point Flux control - Manual/ Tracking mode */ void mcFlxI_FluxControlManual(const tmcFlx_Parameters_s * const pParameters, const float32_t Out ) /* Fixed point Flux control - Manual/ ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-0E2765C2-F3CB-4BAE-92EB-51E6D3054111.html</loc>
                                                   <lastmod>2024-09-05T06:50:52</lastmod>
                                                   <title>1.1.1.1.4.3.18.4 mcFlxI_FluxControlAuto</title>
                                                   <description>C /* Floating point flux control loop */ void mcFlxI_FluxControlAuto( const tmcFlx_Parameters_s * const pParameters, const float32_t iDref, const float32_t iDact, const float32_t iDmax, float32_t * ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-2A7213F2-2D96-4D0D-984B-DABD731BC9A2.html</loc>
                                                   <lastmod>2024-07-31T08:58:31</lastmod>
                                                   <title>1.1.1.1.4.3.18.5 mcFlxI_FluxControlDisable</title>
                                                   <description>C /* Disable flux control module */ void mcFlxI_FluxControlDisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the flux control module. Description This function disables the flux ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-B5F89A81-EEFB-47A5-BFD0-D5B73BF13C53.html</loc>
                                                   <lastmod>2024-08-01T05:15:07</lastmod>
                                                   <title>1.1.1.1.4.3.18.6 mcFlxI_FluxControlReset</title>
                                                   <description>C /* Reset flux control module */ void mcFlxI_FluxControlReset( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the flux control module. Description This function resets the flux ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-C099E625-F92D-4904-BBFC-C2A70D9C8763.html</loc>
                                                   <lastmod>2024-08-01T06:08:40</lastmod>
                                                   <title>1.1.1.1.4.3.18.7 mcFlxI_FluxWeakeningInit</title>
                                                   <description>C /* Initialize flux weakening module */ void mcFlxI_FluxWeakeningInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the flux weakening module Description This function initializes ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-61ABC3CE-FDB9-4F16-A372-751DEE786042.html</loc>
                                                   <lastmod>2024-07-31T08:47:01</lastmod>
                                                   <title>1.1.1.1.4.3.18.8 mcFlxI_FluxWeakeningEnable</title>
                                                   <description>C /* Enable flux weakening module */ void mcFlxI_FluxWeakeningEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the flux weakening module. Description This function enables the flux ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-C417A0D7-E2FF-46C4-8A75-AF3D5265DD6D.html</loc>
                                                   <lastmod>2024-08-01T07:22:27</lastmod>
                                                   <title>1.1.1.1.4.3.18.9 mcFlxI_FluxWeakening</title>
                                                   <description>C /* Flux weakening control */ void mcFlxI_FluxWeakening( const tmcFlx_Parameters_s * const pParameters, const tmcTypes_DQ_s * const pUDQ, const tmcTypes_AlphaBeta_s * const pEAlphaBeta, const ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-98F5FAD7-9104-401C-8CBC-19FA27773206.html</loc>
                                                   <lastmod>2024-08-01T05:56:24</lastmod>
                                                   <title>1.1.1.1.4.3.18.10 mcFlxI_FluxWeakeningDisable</title>
                                                   <description>C /* Disable flux weakening module */ void mcFlxI_FluxWeakeningDisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the flux weakening module. Description This function disables the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-B9A6FEA2-1E5E-49C9-A32A-55C790AE0DBD.html</loc>
                                                   <lastmod>2024-08-01T13:17:44</lastmod>
                                                   <title>1.1.1.1.4.3.18.11 mcFlxI_FluxWeakeningReset</title>
                                                   <description>C /* Reset flux weakening module */ void mcFlxI_FluxWeakeningReset( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the flux weakening module. Description This function resets the flux ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-7E74DD83-5D19-472C-9AB6-6B036837082A.html</loc>
                                                   <lastmod>2024-08-01T06:39:43</lastmod>
                                                   <title>1.1.1.1.4.3.18.12 mcFlxI_MTPAInit</title>
                                                   <description>C /* Initialize MTPA module */ void mcFlxI_FluxWeakeningInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the MTPA module Description This function initializes the MTPA module by ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-5082D82A-C230-4792-80EE-E31AB4A9039D.html</loc>
                                                   <lastmod>2024-08-01T05:40:14</lastmod>
                                                   <title>1.1.1.1.4.3.18.13 mcFlxI_MTPAEnable</title>
                                                   <description>C /* Enable MTPA module */ void mcFlxI_MTPAEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the Maximum Torque per Ampere (MTPA) module. Description This function enables the MTPA ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-6AB765CD-3B0D-4A9D-9786-FAD686CEFF77.html</loc>
                                                   <lastmod>2024-08-01T10:57:55</lastmod>
                                                   <title>1.1.1.1.4.3.18.14 mcFlxI_MTPA</title>
                                                   <description>C /* MTPA control */ void mcFlxI_MTPA( tmcFlx_Parameters_s * const pParameters, const tmcTypes_DQ_s * const pIdq, float32_t * const pIdref ) Summary Performs Maximum Torque per Ampere (MTPA) control ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-9D230B6F-F9CC-439E-9E16-42AFD30EDB55.html</loc>
                                                   <lastmod>2024-08-01T05:56:52</lastmod>
                                                   <title>1.1.1.1.4.3.18.15 mcFlxI_MTPADisable</title>
                                                   <description>C /* Disable MTPA module */ void mcFlxI_MTPADisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the MTPA module. Description This function disables the MTPA module by linking the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-D6FB7702-A7FC-422D-9833-923CDC87C6A4.html</loc>
                                                   <lastmod>2024-08-01T11:27:42</lastmod>
                                                   <title>1.1.1.1.4.3.18.16 mcFlxI_MTPAReset</title>
                                                   <description>C /* Reset MTPA module */ void mcFlxI_MTPAReset( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the MTPA module. Description This function resets the MTPA module. Precondition None. ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-0FB8D25F-8A50-40DF-86FC-C2629D39185C.html</loc>
                                                   <lastmod>2024-09-05T06:31:52</lastmod>
                                                   <title>1.1.1.1.4.3.18.17 tmcFlx_State_s Draft</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating flux control module enable status */ bool initDone; /* Flag indicating flux control module initialization status */ &lt;#if ( MCPMSMFOC_ENABLE_FW == ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-FC3360CA-CEB3-454C-AAF3-75E267783933.html</loc>
                                                   <lastmod>2024-09-12T08:15:39</lastmod>
                                                   <title>1.1.1.1.4.3.18.18 tmcFlx_Parameters_s Struct</title>
                                                   <description>C typedef struct { float32_t Kp; /* Proportional gain for PI controller */ float32_t Ki; /* Integral gain for PI controller */ float32_t dt; /* Sampling time */ &lt;#if MCPMSMFOC_ENABLE_FW == true &gt; ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-EDCF7049-2274-45F2-9AC9-DC83A186F78D.html</loc>
                                                   <lastmod>2024-09-05T06:43:29</lastmod>
                                                   <title>1.1.1.1.4.3.18.19 tmcFlx_MTPA_s</title>
                                                   <description>C /* Structure defining MTPA module state: Floating point version */ typedef struct { bool enable; /* Flag to enable or disable the MTPA operation */ bool initDone; /* Flag indicating MTPA module ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-ED65B907-1AE7-4826-B0B4-B2D868EEBC32.html</loc>
                                                   <lastmod>2024-08-01T13:29:03</lastmod>
                                                   <title>1.1.1.1.4.3.18.20 tmcFlx_FluxWeakening_s Struct</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating field weakening module enable status */ bool initDone; /* Flag indicating field weakening module initialization status */ bool feedForwardEnable; /* ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-93C92F24-67BF-47EF-9FC8-CB25B0448049.html</loc>
                                             <lastmod>2024-09-12T08:54:23</lastmod>
                                             <title>1.1.1.1.4.3.19 Flying Start API Reference</title>
                                             <description>This section describes the API references for the flying start module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-AD04CE6C-AE48-4E08-9E9A-5C4C1E12CD9F.html</loc>
                                                   <lastmod>2024-09-02T10:20:52</lastmod>
                                                   <title>1.1.1.1.4.3.19.1 mcFlyI_FlyingStartInit</title>
                                                   <description>C /* Initialize flying start module */ void mcFlyI_FlyingStartInit( tmcFly_Parameters_s * const pParameters ) Summary Initialize flying start module. Description This function initializes the flying ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-5677F685-AE70-4583-AC21-F8366E62CF09.html</loc>
                                                   <lastmod>2024-09-02T10:20:46</lastmod>
                                                   <title>1.1.1.1.4.3.19.2 mcFlyI_FlyingStartEnable</title>
                                                   <description>C /* Enable flying start module */ void mcFlyI_FlyingStartEnable( tmcFly_Parameters_s * const pParameters ) Summary Enables flying start module. Description This function enables the flying start ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-123EA696-ED60-4BE0-AB63-1099B11EEC84.html</loc>
                                                   <lastmod>2024-09-02T10:20:30</lastmod>
                                                   <title>1.1.1.1.4.3.19.3 mcFlyI_FlyingStart</title>
                                                   <description>C /* Perform flying start */ tmcTypes_StdReturn_e mcFlyI_FlyingStart( tmcFly_Parameters_s * const pParameters, const float32_t speed, const float32_t commandDirection, float32_t * const pIdref, ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E3043FD6-1A8D-4CFA-8227-264EA1428F26.html</loc>
                                                   <lastmod>2024-09-02T10:20:41</lastmod>
                                                   <title>1.1.1.1.4.3.19.4 mcFlyI_FlyingStartDisable</title>
                                                   <description>C /* Disable flying start module */ void mcFlyI_FlyingStartDisable( tmcFly_Parameters_s * const pParameters ) Summary Disables flying start module. Description This function disables the flying start ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-1F179160-4999-469E-B460-078F770CD36F.html</loc>
                                                   <lastmod>2024-09-02T10:20:35</lastmod>
                                                   <title>1.1.1.1.4.3.19.5 mcFlyI_FlyingStartReset</title>
                                                   <description>C /* Reset flying start module */ void mcFlyI_FlyingStartReset( tmcFly_Parameters_s * const pParameters ) Summary Resets flying start module. Description This function resets the flying start module ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-FA231C97-219C-4281-A35E-B8D029A75B35.html</loc>
                                                   <lastmod>2024-09-02T10:20:25</lastmod>
                                                   <title>1.1.1.1.4.3.19.6 tmcFly_State_s Struct</title>
                                                   <description>C /* Structure defining the state parameters for flying start operation */ typedef struct tmcFly_State_s { /** Switches */ bool enable; /* Flag indicating flying start module enable status */ bool ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-ADCD5EBE-C9FD-460C-89AE-A5004E4A6279.html</loc>
                                                   <lastmod>2024-09-02T10:20:14</lastmod>
                                                   <title>1.1.1.1.4.3.19.7 tmcFly_Parameters_s Struct</title>
                                                   <description>C /* Structure defining the parameters for flying start operation */ typedef struct { float32_t dt; /* Sample time */ float32_t detectTime; /* Flying start detection time */ float32_t ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-7F83E1D9-118A-46C8-AA6C-0797E6E90BD0.html</loc>
                                                   <lastmod>2024-09-02T10:20:19</lastmod>
                                                   <title>1.1.1.1.4.3.19.8 tmcFly_FlyingStartState_e Enum</title>
                                                   <description>C typedef enum tmcFly_FlyingStartState_e { FlyingStart_Initialize, /* Flying start sequence is in initialization state */ FlyingStart_Check, /* Flying start sequence is in transitioning state */ ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-051B4D0D-339E-4FFC-AB70-B5B3BF947417.html</loc>
                                             <lastmod>2024-09-12T08:56:16</lastmod>
                                             <title>1.1.1.1.4.3.20 Motor Parameters API Reference</title>
                                             <description>This section describes the API references for the motor parameter configuration module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-ABDB314F-3947-401B-AC7B-AE732C30ED8C.html</loc>
                                                   <lastmod>2024-07-30T12:36:44</lastmod>
                                                   <title>1.1.1.1.4.3.20.1 mcMotI_MotorParametersInit</title>
                                                   <description>C /* Motor parameters initialization */ void mcMotI_MotorParametersInit( tmcMot_PMSM_s * const pParameters ) Summary Motor parameters initialization Description This function initializes the motor ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-91452ED7-1AD8-4CAF-8CBD-51157DFB81A8.html</loc>
                                                   <lastmod>2024-08-13T09:52:57</lastmod>
                                                   <title>1.1.1.1.4.3.20.2 tmcMot_PMSM_s Struct</title>
                                                   <description>C typedef struct { float32_t PolePairs; /* Number of pole pairs */ float32_t RsInOhms; /* Per phase resistance in Ohms */ float32_t LdInHenry; /* Direct axis inductance in Henry */ float32_t ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-ADA9E733-D754-440C-870C-667F52B33F79.html</loc>
                                             <lastmod>2024-09-12T09:16:29</lastmod>
                                             <title>1.1.1.1.4.3.21 Open Loop Startup API Reference</title>
                                             <description>This section describes the API references for the open loop startup module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-5709463C-9692-4C32-849D-71ED7F9D6F92.html</loc>
                                                   <lastmod>2024-07-29T11:31:32</lastmod>
                                                   <title>1.1.1.1.4.3.21.1 mcSupI_OpenLoopStartupInit</title>
                                                   <description>C /* Initialize open loop start-up module */ void mcSupI_OpenLoopStartupInit( tmcSup_Parameters_s * const pParameters ) Summary Initializes the open loop start-up module Description This function ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-209C065D-A933-4946-A07E-F402D69AF9BC.html</loc>
                                                   <lastmod>2024-07-30T05:31:13</lastmod>
                                                   <title>1.1.1.1.4.3.21.2 mcSupI_OpenLoopStartupEnable</title>
                                                   <description>C /* Enable open loop start-up module */ void mcSupI_OpenLoopStartupEnable( tmcSup_Parameters_s * const pParameters ) Summary Enables the speed control module. Description This function enables the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-4D3536DD-A4DC-42D6-9151-675D0E6F93B9.html</loc>
                                                   <lastmod>2024-08-14T06:52:48</lastmod>
                                                   <title>1.1.1.1.4.3.21.3 mcSupI_OpenLoopStartup</title>
                                                   <description>C /* Perform open loop start-up : Floating point version */ tmcTypes_StdReturn_e mcSupI_OpenLoopStartup( const tmcSup_Parameters_s * const pParameters, float32_t direction, float32_t * const pIQref, ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-DD95B01D-74C5-4333-ACFD-A1ACEB543D51.html</loc>
                                                   <lastmod>2024-07-30T05:39:00</lastmod>
                                                   <title>1.1.1.1.4.3.21.4 mcSupI_OpenLoopStartupDisable</title>
                                                   <description>C /* Disable open loop start-up module */ void mcSupI_OpenLoopStartupDisable( tmcSup_Parameters_s * const pParameters ) Summary Disables the open loop start-up module. Description This function ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-A8977F73-5082-4516-9680-A8ADBF1BB483.html</loc>
                                                   <lastmod>2024-07-30T10:56:00</lastmod>
                                                   <title>1.1.1.1.4.3.21.5 mcSupI_OpenLoopStartupReset</title>
                                                   <description>C /* Reset open loop start-up */ void mcSupI_OpenLoopStartupReset( const tmcSup_Parameters_s * const pParameters ) Summary Resets the open loop start-up parameters. Description This function resets ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-91AF22E7-8E45-42B4-B737-6FAE9C58BB49.html</loc>
                                                   <lastmod>2024-09-09T11:19:31</lastmod>
                                                   <title>1.1.1.1.4.3.21.6 tmcSup_State_s Struct</title>
                                                   <description>C /* Structure defining the state parameters for open loop start-up: Floating point version */ typedef struct { bool enable; /* Flag indicating open loop start-up module enable status */ bool ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-162593F8-1D14-4EC0-AD7E-24B255074CF7.html</loc>
                                                   <lastmod>2024-08-08T11:16:33</lastmod>
                                                   <title>1.1.1.1.4.3.21.7 tmcSup_Parameters_s Struct</title>
                                                   <description>C typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Pointer to the motor parameters structure */ float32_t alignmentTime; /* Alignment time */ float32_t alignmentCurrent; /* Alignment current */ ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-735ED8C3-91B8-475D-A6EF-383D57B4D303.html</loc>
                                                   <lastmod>2024-07-30T11:17:35</lastmod>
                                                   <title>1.1.1.1.4.3.21.8 tmcSup_State_e Enum</title>
                                                   <description>C typedef enum { startupState_Align, /* Start-up sequence is in initial field alignment state. */ startupState_Ramp, /* Start-up sequence is in open loop ramp state. */ startupState_Stabilize /* The ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-62CA7E13-B0D2-4DF9-9DF0-ECFBECB01BAC.html</loc>
                                             <lastmod>2024-09-12T09:29:22</lastmod>
                                             <title>1.1.1.1.4.3.22 PWM API Reference</title>
                                             <description>This section describes the API references for the PWM modulator.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-3F2D95F4-FAE8-41FE-9D00-C554008BDC48.html</loc>
                                                   <lastmod>2024-07-26T13:15:54</lastmod>
                                                   <title>1.1.1.1.4.3.22.1 mcPwmI_PulseWidthModulationInit</title>
                                                   <description>C /* Initialize PWM modulator */ void mcPwmI_PulseWidthModulationInit( tmcPwm_Parameters_s * const pParameters ) Summary Initialize PWM modulator Description This function initializes the Pulse Width ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-37154732-4345-4D52-800B-5F1CE3C960CE.html</loc>
                                                   <lastmod>2024-08-05T06:13:51</lastmod>
                                                   <title>1.1.1.1.4.3.22.2 mcPwmI_PulseWidthModulationEnable</title>
                                                   <description>C /* Enable PWM modulator */ void mcPwmI_PulseWidthModulationEnable( tmcPwm_Parameters_s * const pParameters ) Summary Enable PWM modulator Description This function enables the PWM modulator by ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-BA7D6341-0C4C-4D61-AD07-932167CD8E87.html</loc>
                                                   <lastmod>2024-09-05T08:36:39</lastmod>
                                                   <title>1.1.1.1.4.3.22.3 mcPwmI_PulseWidthModulation</title>
                                                   <description>C /* PWM Modulator */ mcPwmI_PulseWidthModulation( const tmcPwm_Parameters_s * const pParameters, const float32_t uBus, const tmcTypes_AlphaBeta_s * const pUalphaBeta, int16_t * const pDuty ) Summary ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-0B892C5C-D30A-4B74-92AE-B818623BD627.html</loc>
                                                   <lastmod>2024-07-29T04:38:47</lastmod>
                                                   <title>1.1.1.1.4.3.22.4 mcPwmI_PulseWidthModulationDisable</title>
                                                   <description>C /* Disable PWM modulator */ mcPwmI_PulseWidthModulationDisable( tmcPwm_Parameters_s * const pParameters ) Summary Disables the PWM modulator. Description This function disables the PWM modulator by ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-00D908BD-39D6-4F9C-A3FA-F1B601130140.html</loc>
                                                   <lastmod>2024-07-29T06:19:36</lastmod>
                                                   <title>1.1.1.1.4.3.22.5 mcPwmI_PulseWidthModulationReset</title>
                                                   <description>C /* Reset PWM modulator */ void mcPwmI_PulseWidthModulationReset( const tmcPwm_Parameters_s * const pParameters ) Summary Resets the PWM modulator.. Description This function resets the PWM ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E0E012F4-A6B5-4623-8752-EAD9048F8EB1.html</loc>
                                                   <lastmod>2024-07-26T13:16:03</lastmod>
                                                   <title>1.1.1.1.4.3.22.6 mcPwm_IntegerScale</title>
                                                   <description>C /* PWM scaling*/ int16_t mcPwm_IntegerScale( const float32_t factor, int16_t input ) Summary Perform the PWM output scaling Description This function scales an integer input by a floating-point ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-2096EBEA-DE6C-429A-83E1-31E22B84842B.html</loc>
                                                   <lastmod>2024-07-29T06:33:35</lastmod>
                                                   <title>1.1.1.1.4.3.22.7 tmcPwm_State_s Struct</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating PWM module enable status */ bool initDone; /* Flag indicating PWM module initialization status */ int16_t pwmPeriodCount; /* PWM period count value ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-49972E8B-70F4-4472-82E3-27EA85E1D5F4.html</loc>
                                                   <lastmod>2024-08-09T05:43:21</lastmod>
                                                   <title>1.1.1.1.4.3.22.8 tmcPwm_Parameters_s Struct</title>
                                                   <description>C /* PWM module parameter structure: Floating point version */ typedef struct { uint16_t pwmPeriodCount; /* PWM period count */ uint16_t deadTimeCount; /* Dead time count */ float32_t maxModIndex; /* ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-45C508CB-2E07-48E8-9266-D67C0A132EFD.html</loc>
                                                   <lastmod>2024-07-29T06:45:48</lastmod>
                                                   <title>1.1.1.1.4.3.22.9 tmcPwm_Sector_e Enum</title>
                                                   <description>C typedef enum { SECTOR_1, SECTOR_2, SECTOR_3, SECTOR_4, SECTOR_5, SECTOR_6 }tmcPwm_Sector_e; Summary Defines the sectors for Space Vector PWM Description This enumeration defines the sectors for ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-82C7D359-5F86-41C6-8FBB-4E9AE7895961.html</loc>
                                                   <lastmod>2024-07-29T06:56:35</lastmod>
                                                   <title>1.1.1.1.4.3.22.10 DT_PADDING Macro</title>
                                                   <description>C #define DT_PADDING (int16_t)12 Summary Defines the constant value used as padding for the dead time count in PWM calculations Description This macro defines a constant value used as padding for the ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-7F47B1B7-2CB8-492F-B60E-E96EF6CAEDFA.html</loc>
                                             <lastmod>2024-09-12T10:00:00</lastmod>
                                             <title>1.1.1.1.4.3.23 Reference Control API Reference</title>
                                             <description>This section describes the API references for the reference control module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-D492A071-9A07-4FBF-9A8E-AE818BCCCBC1.html</loc>
                                                   <lastmod>2024-09-04T08:47:11</lastmod>
                                                   <title>1.1.1.1.4.3.23.1 mcRefI_ReferenceControlInit</title>
                                                   <description>C /* Initialize reference control module */ void mcRefI_ReferenceControlInit( tmcRef_Parameters_s * const pParameters ) Summary Initializes the torque control module Description This function ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-108A98BA-893C-48C6-ADCE-E92BE9677506.html</loc>
                                                   <lastmod>2024-09-02T07:05:33</lastmod>
                                                   <title>1.1.1.1.4.3.23.2 mcRefI_ReferenceControlEnable</title>
                                                   <description>C /* Enable reference control module */ void mcRefI_ReferenceControlEnable( tmcRef_Parameters_s * const pParameters ) Summary Enables the reference control module. Description This function enables ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-224C2527-80C6-44A9-8F12-84C7B0C1C1C7.html</loc>
                                                   <lastmod>2024-08-14T10:17:27</lastmod>
                                                   <title>1.1.1.1.4.3.23.3 mcRefI_ReferenceControl</title>
                                                   <description>C /* Floating point reference control */ void mcRefI_ReferenceControl( tmcRef_Parameters_s * const pParameters, const float32_t command, float32_t * const pOut ) /* Fixed point reference control */ ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-38672EDD-FC31-4FB1-8134-5663F2B52855.html</loc>
                                                   <lastmod>2024-09-02T07:11:19</lastmod>
                                                   <title>1.1.1.1.4.3.23.4 mcRefI_ReferenceControlDisable</title>
                                                   <description>C /* Disable reference control module */ void mcRefI_ReferenceControlDisable( tmcRef_Parameters_s * const pParameters ) Summary Disables the reference control module. Description This function ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-80FABEF4-F279-4CA0-8542-6C9EED85FE8D.html</loc>
                                                   <lastmod>2024-09-02T07:24:42</lastmod>
                                                   <title>1.1.1.1.4.3.23.5 mcRefI_ReferenceControlReset</title>
                                                   <description>C /* Reset reference control module */ void mcRefI_ReferenceControlReset( tmcRef_Parameters_s * const pParameters ) Summary Resets the reference control module. Description This function resets the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-3E501283-7BEC-46E9-BC00-37E1FB8CD9AC.html</loc>
                                                   <lastmod>2024-09-09T11:32:00</lastmod>
                                                   <title>1.1.1.1.4.3.23.6 tmcRef_State_s Struct</title>
                                                   <description>C // Floating point structure defining the state of the reference control module. typedef struct { bool enable; /* Flag indicating reference control module enable status */ bool initDone; /* Flag ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-F54FDC17-9A9D-444E-A7DC-EC4250E1BB0D.html</loc>
                                                   <lastmod>2024-09-04T08:54:00</lastmod>
                                                   <title>1.1.1.1.4.3.23.7 tmcRef_Parameters_s Struct</title>
                                                   <description>C typedef struct { &lt;#if ( MCPMSMFOC_CONTROL_TYPE == 'SPEED_LOOP' ) &gt; float32_t minimumRpm; /* Minimum RPM */ float32_t maximumRpm; /* Maximum RPM */ &lt;#if MCPMSMFOC_RAMP_PROFILES == 'Linear'&gt; ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-09303D23-D377-44CB-83E7-4709D2931CC2.html</loc>
                                             <lastmod>2024-09-12T09:55:26</lastmod>
                                             <title>1.1.1.1.4.3.24 Speed Control API Reference</title>
                                             <description>This section describes the API references for the speed control module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-A767C164-C52A-4AAF-AD7D-E5D367EE3C6B.html</loc>
                                                   <lastmod>2024-09-03T11:57:57</lastmod>
                                                   <title>1.1.1.1.4.3.24.1 mcSpeI_SpeedControlInit</title>
                                                   <description>C /* Initialize speed control module */ void mcSpeI_SpeedControlInit( tmcSpe_Parameters_s * const pParameters ) Summary Initializes the speed control module Description This function initializes the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-52B528A5-613B-4C5C-B918-BE622754B69E.html</loc>
                                                   <lastmod>2024-09-10T07:14:08</lastmod>
                                                   <title>1.1.1.1.4.3.24.2 mcSpeI_SpeedControlEnable</title>
                                                   <description>C /* Enable speed control module */ void mcSpeI_SpeedControlEnable( tmcSpe_Parameters_s * const pParameters ) Summary Enables the speed control module. Description This function enables the speed ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-2C0CD558-A51D-43D7-9879-6C05B2946BDE.html</loc>
                                                   <lastmod>2024-09-04T06:27:49</lastmod>
                                                   <title>1.1.1.1.4.3.24.3 mcSpeI_SpeedControlManual</title>
                                                   <description>C /* Speed control - manual mode : floating point version */ void mcSpeI_SpeedControlManual( const tmcSpe_Parameters_s * const pParameters, const float32_t Out ) /* Speed control - manual mode : ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-ECAEE3D3-8897-42F2-87B1-415C15C736AC.html</loc>
                                                   <lastmod>2024-08-08T06:29:28</lastmod>
                                                   <title>1.1.1.1.4.3.24.4 mcSpeI_SpeedControlAuto</title>
                                                   <description>C /* speed control loop: floating point version */ void mcSpeI_SpeedControlAuto( const tmcSpe_Parameters_s * const pParameters, const float32_t nref, const float32_t nact, float32_t * const pOut ) /* ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-A1EB5A47-ADAF-4976-A185-30BC9E81CE39.html</loc>
                                                   <lastmod>2024-09-10T09:24:17</lastmod>
                                                   <title>1.1.1.1.4.3.24.5 mcSpeI_SpeedControlReset</title>
                                                   <description>C /* Reset speed control module */ void mcSpeI_SpeedControlReset( const tmcSpe_Parameters_s * const pParameters ) Summary Resets the speed control module. Description This function resets the speed ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-61726369-80C4-446E-94CF-BF9876134B6F.html</loc>
                                                   <lastmod>2024-09-10T07:17:23</lastmod>
                                                   <title>1.1.1.1.4.3.24.6 mcSpeI_SpeedControlDisable</title>
                                                   <description>C /* Disable speed control module */ void mcSpeI_SpeedControlDisable( tmcSpe_Parameters_s * const pParameters ) Summary Disables the speed control module. Description This function disables the speed ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-5E93609B-AF17-4BCD-B56C-EEF3490548B4.html</loc>
                                                   <lastmod>2024-09-09T11:20:20</lastmod>
                                                   <title>1.1.1.1.4.3.24.7 tmcSpe_State_s Struct</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating Speed control module enable status */ bool initDone; /* Flag indicating Speed control module initialization status */ tmcUtils_PiControl_s ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-6D1964FA-2BB0-48EA-A331-B0B04102E7CB.html</loc>
                                                   <lastmod>2024-08-09T09:33:49</lastmod>
                                                   <title>1.1.1.1.4.3.24.8 tmcSpe_Parameters_s Struct</title>
                                                   <description>C typedef struct { float32_t Kp; /* Proportional gain */ float32_t Ki; /* Integral gain */ float32_t Ymax; /* Maximum motor current */ float32_t dt; /* PWM period */ void * pStatePointer; /* Pointer ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-F87B6F26-5599-4975-BBD9-A17AF00B037A.html</loc>
                                             <lastmod>2024-09-12T10:38:44</lastmod>
                                             <title>1.1.1.1.4.3.25 Torque Control API Reference</title>
                                             <description>This section describes the API references for the torque control module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-AECEBEDD-CEA4-4BAA-BB38-642134FFFAFB.html</loc>
                                                   <lastmod>2024-07-29T04:41:03</lastmod>
                                                   <title>1.1.1.1.4.3.25.1 mcTorI_TorqueControlInit</title>
                                                   <description>C /* Initialize torque control module */ void mcTorI_TorqueControlInit( tmcTor_Parameters_s * const pParameters ) Summary Initializes the torque control module Description This function initializes ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E71B6BE4-6000-4EC8-A9DC-25BE693E8EB5.html</loc>
                                                   <lastmod>2024-07-29T04:40:09</lastmod>
                                                   <title>1.1.1.1.4.3.25.2 mcTorI_TorqueControlEnable</title>
                                                   <description>C /* Enable torque control module */ void mcTorI_TorqueControlEnable( tmcTor_Parameters_s * const pParameters ) Summary Enables the torque control module. Description This function enables the torque ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-B0960401-F15D-4A2F-9BE3-B2E7A2552467.html</loc>
                                                   <lastmod>2024-09-05T09:42:19</lastmod>
                                                   <title>1.1.1.1.4.3.25.3 mcTorI_TorqueControlAuto</title>
                                                   <description>C /* Torque control - auto mode : floating point version */ void mcTorI_TorqueControlAuto( const tmcTor_Parameters_s * const pParameters, const float32_t iQref, const float32_t iQact, const float32_t ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-FDB2A596-C8F6-46A3-8D75-3AE3B60B195C.html</loc>
                                                   <lastmod>2024-08-16T10:38:59</lastmod>
                                                   <title>1.1.1.1.4.3.25.4 mcTorI_TorqueControlManual</title>
                                                   <description>C /* Torque control - manual mode : floating point version */ void mcTorI_TorqueControlManual( const tmcTor_Parameters_s * const pParameters, const float32_t Out ) /* Torque control - manual mode : ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E04E56E2-4D2D-4BBA-ABF1-F7EAE2D83E04.html</loc>
                                                   <lastmod>2024-07-29T04:39:28</lastmod>
                                                   <title>1.1.1.1.4.3.25.5 mcTorI_TorqueControlDisable</title>
                                                   <description>C /* Disable torque control module */ void mcTorI_TorqueControlDisable( tmcTor_Parameters_s * const pParameters ) Summary Disables the torque control module. Description This function disables the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-521990F2-BCFF-4400-AD82-493C1C19CE85.html</loc>
                                                   <lastmod>2024-07-24T10:24:34</lastmod>
                                                   <title>1.1.1.1.4.3.25.6 mcTorI_TorqueControlReset</title>
                                                   <description>C /* Reset torque control module */ void mcTorI_TorqueControlReset( const tmcTor_Parameters_s * const pParameters ) Summary Resets the torque control module. Description This function resets the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-B8660A41-B563-4003-B915-27BB6244A6A3.html</loc>
                                                   <lastmod>2024-09-09T11:18:22</lastmod>
                                                   <title>1.1.1.1.4.3.25.7 tmcTor_State_s Struct</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating Torque module enable status */ bool initDone; /* Flag indicating Torque module initialization status */ tmcUtils_PiControl_s bPIController; /* PI ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-29E88A9B-3CEF-4FD0-ABE9-FF9D734060A5.html</loc>
                                                   <lastmod>2024-08-09T09:48:36</lastmod>
                                                   <title>1.1.1.1.4.3.25.8 tmcTor_Parameters_s Struct</title>
                                                   <description>C typedef struct { float32_t Kp; /* Proportional gain for torque control */ float32_t Ki; /* Integral gain for torque control */ float32_t dt; /* Time step for torque control */ void * pStatePointer; ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                          <url>
                                             <loc>GUID-93DFD1DF-A5E8-4903-8826-F92C94F3EEF2.html</loc>
                                             <lastmod>2024-09-12T11:44:59</lastmod>
                                             <title>1.1.1.1.4.3.26 Position Control API Reference</title>
                                             <description>This section describes the API references for the position control module.</description>
                                             <urls>
                                                <url>
                                                   <loc>GUID-E0C15431-5B04-4C40-B4C1-A8818B405042.html</loc>
                                                   <lastmod>2024-09-03T11:59:48</lastmod>
                                                   <title>1.1.1.1.4.3.26.1 mcPosI_PositionControlInit</title>
                                                   <description>C /* Initialize position control module */ void mcPosI_PositionControlInit( tmcPos_Parameters_s * const pParameters ) Summary Initializes the position control module Description This function ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-B9C69650-15E9-4E89-BEA9-8C1DB5BE7857.html</loc>
                                                   <lastmod>2024-09-04T06:28:07</lastmod>
                                                   <title>1.1.1.1.4.3.26.2 mcPosI_PositionControlEnable</title>
                                                   <description>C /* Enable position control module */ void mcPosI_PositionControlEnable( tmcPos_Parameters_s * const pParameters ) Summary Enables the position control module. Description This function enables the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-E9C802EF-0DA5-49C3-8B05-0B2375B11B0A.html</loc>
                                                   <lastmod>2024-09-04T06:27:55</lastmod>
                                                   <title>1.1.1.1.4.3.26.3 mcPosI_PositionControlManual</title>
                                                   <description>C /* Perform manual position control */ void mcPosI_PositionControlManual( const tmcPos_Parameters_s * const pParameters, const float32_t Out ) Summary Perform manual position control with specified ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-ABE2EBC0-B26B-4A42-B45A-659D9AE3CC08.html</loc>
                                                   <lastmod>2024-09-04T06:28:00</lastmod>
                                                   <title>1.1.1.1.4.3.26.4 mcPosI_PositionControlAuto</title>
                                                   <description>C /* Perform automatic position control */ void mcPosI_PositionControlAuto( const tmcPos_Parameters_s * const pParameters, const float32_t ref, const float32_t act, float32_t * const pOut ) Summary ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-A53CF31E-4DEB-4809-9CFD-62807A0A45DA.html</loc>
                                                   <lastmod>2024-09-04T05:42:35</lastmod>
                                                   <title>1.1.1.1.4.3.26.5 mcPosI_PositionControlDisable</title>
                                                   <description>C /* Disable position control module */ void mcPosI_PositionControlDisable( tmcPos_Parameters_s * const pParameters ) Summary Disables the position control module. Description This function disables ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-3DC7124A-1783-446D-9B9F-01B07A3D5EAA.html</loc>
                                                   <lastmod>2024-09-04T05:55:27</lastmod>
                                                   <title>1.1.1.1.4.3.26.6 mcPosI_PositionControlReset</title>
                                                   <description>C /* Reset position control module */ void mcPosI_PositionControlReset( const tmcPos_Parameters_s * const pParameters ) Summary Resets the speed control module. Description This function resets the ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-C25D79BD-A4F7-4399-AB03-5F1B07577255.html</loc>
                                                   <lastmod>2024-09-03T11:11:00</lastmod>
                                                   <title>1.1.1.1.4.3.26.7 tmcPos_State_s Struct</title>
                                                   <description>C typedef struct { bool enable; /* Flag indicating position control module enable status */ bool initDone; /* Flag indicating position control module initialization status */ tmcUtils_PiControl_s ...</description>
                                                   <urls/>
                                                </url>
                                                <url>
                                                   <loc>GUID-83442A0B-90E1-4DD3-B198-B28709B6E1E3.html</loc>
                                                   <lastmod>2024-09-04T06:45:42</lastmod>
                                                   <title>1.1.1.1.4.3.26.8 tmcPos_Parameters_s Struct</title>
                                                   <description>C typedef struct { float32_t Kp; /* Proportional gain */ float32_t Ki; /* Integral gain */ float32_t dt; /* Time step */ void * pStatePointer; /* Pointer to state information */ } ...</description>
                                                   <urls/>
                                                </url>
                                             </urls>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-ADE7881E-AEEB-4EDC-B439-356982B16585.html</loc>
                                       <lastmod>2024-09-12T12:09:41</lastmod>
                                       <title>1.1.1.1.4.4 Rotor Position Calculation API Reference</title>
                                       <description>This section describes the API references for the rotor position calculation module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-47A969F5-FAE8-48B3-9EDC-AA05ADCAF95D.html</loc>
                                             <lastmod>2024-09-03T10:30:18</lastmod>
                                             <title>1.1.1.1.4.4.1 mcRpcI_RotorPositionCalcInit</title>
                                             <description>C /* Initialize rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcInit( tmcRpc_ModuleData_s * const pModule ) Summary Initialize rotor position calculation module Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-0AD04A29-0AAD-4E91-86DB-BB865B50E8A5.html</loc>
                                             <lastmod>2024-09-03T09:02:28</lastmod>
                                             <title>1.1.1.1.4.4.2 mcRpcI_RotorPositionCalcEnable</title>
                                             <description>C /* Enable rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcEnable( tmcRpc_Parameters_s * const pParameters ) Summary Enable rotor position estimation module Description This ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-55B83109-5E0F-4799-A066-6CC19F8657BF.html</loc>
                                             <lastmod>2024-09-03T09:02:19</lastmod>
                                             <title>1.1.1.1.4.4.3 mcRpcI_RotorPositionCalc</title>
                                             <description>C /* Perform rotor position calculation */ void mcRpcI_RotorPositionCalc( tmcRpc_ModuleData_s * const pModule ) Summary Perform rotor position calculation. Description This function calculates the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-064598B7-AEC5-4F55-B8FD-A08D073B9CBE.html</loc>
                                             <lastmod>2024-09-03T09:02:34</lastmod>
                                             <title>1.1.1.1.4.4.4 mcRpcI_RotorPositionCalcDisable</title>
                                             <description>C /* Disable rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcDisable( tmcRpc_Parameters_s * const pParameters ) Summary Enable rotor position calculation module Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-3E2FBF20-295D-4355-8861-09A6F326FADB.html</loc>
                                             <lastmod>2024-09-03T09:02:39</lastmod>
                                             <title>1.1.1.1.4.4.5 mcRpcI_RotorPositionCalcReset</title>
                                             <description>C /* Reset rotor position calculation module */ void mcRpcI_RotorPositionCalcReset( const tmcRpc_Parameters_s * const pParameters ) Summary Reset rotor position calculation module. Description This ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-7B8B8A8A-B02D-4660-9558-E4734D8E7A35.html</loc>
                                             <lastmod>2024-09-04T09:40:30</lastmod>
                                             <title>1.1.1.1.4.4.6 mcRpcI_MechanicalAngleGet</title>
                                             <description>C /* Get mechanical angle */ float32_t mcRpcI_MechanicalAngleGet( const tmcRpc_ModuleData_s * const pModule ) Summary Get mechanical angle Description This function is used to read the mechanical ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F4C1C653-264A-4B9D-96BA-67009B03D64F.html</loc>
                                             <lastmod>2024-09-03T10:30:28</lastmod>
                                             <title>1.1.1.1.4.4.7 tmcRpc_State_s Struct</title>
                                             <description>C /* Data structure for Rotor Position Calculation (RPC) */ typedef struct { bool enable; /* Flag indicating if the module is enabled */ bool initDone; /* Flag indicating if initialization is done */ ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F15B117E-87D5-4B61-AB1D-568BBABBCFD2.html</loc>
                                             <lastmod>2024-09-03T10:31:01</lastmod>
                                             <title>1.1.1.1.4.4.8 tmcRpc_Parameters_s Struct</title>
                                             <description>C /* Rotor Position Calculation (RPC) module parameter structure */ typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Motor parameters structure */ float32_t dt; /* Time step or Sample time */ ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-3F96E17E-B26E-46CD-BAA5-12BC3BD0A444.html</loc>
                                             <lastmod>2024-09-03T10:31:12</lastmod>
                                             <title>1.1.1.1.4.4.9 tmcRpc_Output_s Struct</title>
                                             <description>C /* Data structure for Rotor Position Calculation (RPC) module output ports */ typedef struct { float32_t elecAngle; /* Calculated eletcrical angle in radians per sec*/ float32_t elecSpeed; /* ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-2DDD2C10-61B4-4794-9312-5C5BFA43F2E6.html</loc>
                                             <lastmod>2024-09-03T10:34:48</lastmod>
                                             <title>1.1.1.1.4.4.10 tmcRpc_ModuleData_s Struct</title>
                                             <description>C typedef struct { tmcRpc_Input_s dInput; /* Rotor position calculation module input parameter structure */ tmcRpc_Output_s dOutput; /* Rotor position calculation control module output parameter ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-D5A4A321-E0FE-4F02-8BCD-10E75827BA97.html</loc>
                                             <lastmod>2024-09-03T10:30:41</lastmod>
                                             <title>1.1.1.1.4.4.11 tmcRpc_Input_s Struct</title>
                                             <description>C /* Data structure for Rotor Position Calculation (RPC) module input ports */ typedef struct { uint16_t encPulseCount; /* Encoder pulse count value */ &lt;#if __PROCESSOR?matches(".*PIC32MK.*") == ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-3E4B291B-E17C-47FD-B8B0-865F74C611ED.html</loc>
                                       <lastmod>2024-09-12T12:24:25</lastmod>
                                       <title>1.1.1.1.4.5 Rotor Position Estimation API Reference</title>
                                       <description>This section describes the API references for the rotor position estimation module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-0BA3B3DD-B3CF-40CB-999C-0D13BED79AFE.html</loc>
                                             <lastmod>2024-08-16T10:11:24</lastmod>
                                             <title>1.1.1.1.4.5.1 mcRpeI_RotorPositionEstimInit</title>
                                             <description>C /* Initialize rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimInit( tmcRpe_Parameters_s * const pParameters ) Summary Initialize rotor position estimation module Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-144FAB56-2319-4EC8-B7C4-49C9351A39D1.html</loc>
                                             <lastmod>2024-09-09T09:29:46</lastmod>
                                             <title>1.1.1.1.4.5.2 mcRpeI_RotorPositionReady</title>
                                             <description>C /* Check if rotor position estimation is ready */ bool mcRpeI_RotorPositionReady( const tmcRpe_Parameters_s * const pParameters ); Summary Check if rotor position estimation is ready. Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-513B1473-8804-4954-A6A2-74A15B83D972.html</loc>
                                             <lastmod>2024-08-14T11:47:52</lastmod>
                                             <title>1.1.1.1.4.5.3 mcRpeI_RotorPositionEstimEnable</title>
                                             <description>C /* Enable rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimEnable( tmcRpe_Parameters_s * const pParameters ) Summary Enable rotor position estimation module Description This ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-2D8E3700-A5FA-4894-B9E9-CB42E98374B0.html</loc>
                                             <lastmod>2024-09-09T06:54:11</lastmod>
                                             <title>1.1.1.1.4.5.4 mcRpeI_ParametersSet</title>
                                             <description>C /* Set rotor position estimation parameters */ void mcRpeI_ParametersSet(tmcRpe_Parameters_s * const pParameters ) Summary This function sets the parameters for rotor position estimation module ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-20614B72-FE37-4738-89D3-C0E4740BB4F4.html</loc>
                                             <lastmod>2024-09-05T09:13:23</lastmod>
                                             <title>1.1.1.1.4.5.5 mcRpeI_RotorPositionEstim</title>
                                             <description>C /* Perform floating point rotor position estimation*/ void mcRpeI_RotorPositionEstim( const tmcRpe_Parameters_s * const pParameters, const tmcTypes_AlphaBeta_s * pIAlphaBeta, const ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6823E2B6-2607-45AA-96B7-A8A902E0A5EE.html</loc>
                                             <lastmod>2024-08-14T12:11:41</lastmod>
                                             <title>1.1.1.1.4.5.6 mcRpe_RotorPostionOffsetCalc</title>
                                             <description>C /* Rotor position offset calculation */ void mcRpe_RotorPostionOffsetCalc( const tmcRpe_Parameters_s * const pParameters, float32_t * const pF32Offset ) Summary Rotor position offset calculation. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-37583C5E-D05D-4E96-8F6E-3C72BC407236.html</loc>
                                             <lastmod>2024-09-09T09:29:59</lastmod>
                                             <title>1.1.1.1.4.5.7 mcRpeI_MechanicalSpeedGet</title>
                                             <description>C /* Get mechanical speed */ float32_t mcRpeI_MechanicalSpeedGet( const tmcRpe_Parameters_s * const pParameters ); Summary Get mechanical angle Description This function is used to read the estimated ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-9F0534F6-7369-445E-960E-419575EB2399.html</loc>
                                             <lastmod>2024-09-09T08:56:42</lastmod>
                                             <title>1.1.1.1.4.5.8 mcRpeI_MechanicalAngleGet</title>
                                             <description>C /* Get mechanical angle */ float32_t mcRpeI_MechanicalAngleGet( const tmcRpe_Parameters_s * const pParameters ); Summary Get mechanical angle Description This function is used to read the estimated ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-DAB212D4-35AC-4316-8B51-728B693A284C.html</loc>
                                             <lastmod>2024-09-09T08:56:31</lastmod>
                                             <title>1.1.1.1.4.5.9 mcRpeI_ElectricalSpeedGet</title>
                                             <description>C /* Get electrical speed */ float32_t mcRpeI_ElectricalSpeedGet( const tmcRpe_Parameters_s * const pParameters ); Summary Get electrical speed Description This function is used to read the estimated ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-D924D758-3530-47B1-B4B8-7D6D6362D28E.html</loc>
                                             <lastmod>2024-09-09T08:56:15</lastmod>
                                             <title>1.1.1.1.4.5.10 mcRpeI_ElectricalAngleGet</title>
                                             <description>C /* Get electrical angle */ float32_t mcRpeI_ElectricalAngleGet( const tmcRpe_Parameters_s * const pParameters ); Summary Get electrical angle Description This function is used to read the estimated ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-2CC7C7AD-A0B2-4FEF-8B9A-E4C20268EFF4.html</loc>
                                             <lastmod>2024-09-09T09:29:40</lastmod>
                                             <title>1.1.1.1.4.5.11 mcRpeI_CarrierSignalInjection</title>
                                             <description>C /* Inject HF pulse to the DQ axis voltage */ void mcRpeI_CarrierSignalInjection(tmcRpe_Parameters_s * pParameters, tmcTypes_DQ_s * const pUdq ); Summary Inject HF pulse to the DQ axis voltage. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6B99ABD1-D79A-48A3-9E4E-8454083A026B.html</loc>
                                             <lastmod>2024-09-03T07:18:34</lastmod>
                                             <title>1.1.1.1.4.5.12 mcRpeI_RotorPositionEstimReset</title>
                                             <description>C /* Reset rotor position estimation module */ void mcRpeI_RotorPositionEstimReset( const tmcRpe_Parameters_s * const pParameters ) Summary Reset rotor position estimation module. Description This ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-DC1BD475-C96E-44E6-8DF0-5C92AEC92844.html</loc>
                                             <lastmod>2024-08-16T10:11:16</lastmod>
                                             <title>1.1.1.1.4.5.13 mcRpeI_RotorPositionEstimDisable</title>
                                             <description>C /* Disable rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimDisable( tmcRpe_Parameters_s * const pParameters ) Summary Enable rotor position estimation module Description This ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-C0F33F98-171D-4E8B-8C1B-C038FB5FF19B.html</loc>
                                             <lastmod>2024-09-09T06:28:11</lastmod>
                                             <title>1.1.1.1.4.5.14 tmcRpe_TrackingLoopParams_s Struct</title>
                                             <description>C typedef struct { float32_t foInHertz; /* Frequency in Hertz */ float32_t Keps; /* Keps parameter */ } tmcRpe_TrackingLoopParams_s; Summary Tracking loop parameters for the ZS/MT Hybrid position ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-A09367B3-9AF4-4388-8AE9-15D50E3C8FF8.html</loc>
                                             <lastmod>2024-09-05T09:02:31</lastmod>
                                             <title>1.1.1.1.4.5.15 tmcRpe_State_s Struct</title>
                                             <description>C /* Data structure for Rotor Position Estimation (RPE) module: Floating point version */ typedef struct { /** States */ bool enable; /* Flag indicating if the module is enabled */ bool initDone; /* ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-4ACA687D-C6F6-422A-ACE3-C5EE61947232.html</loc>
                                             <lastmod>2024-09-09T11:25:04</lastmod>
                                             <title>1.1.1.1.4.5.16 tmcRpe_Parameters_s Struct</title>
                                             <description>C /* PLL based rotor position estimation user paramters */ typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Motor parameters */ /** BEMF observer parameters */ float32_t Ke; /* BEMF observer ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-22299CE3-D3BD-4E0A-A2E3-3D10749DE067.html</loc>
                                             <lastmod>2024-09-09T09:30:04</lastmod>
                                             <title>1.1.1.1.4.5.17 tmcRpe_IPCParameters_s Struct</title>
                                             <description>C typedef struct { float32_t pulseAmplitude; /* Pulse amplitude */ float32_t pulseDuty; /* Pulse duty cycle */ float32_t pulseDuration; /* Pulse duration */ } tmcRpe_IPCParameters_s; Summary Defines ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-46094F12-D8C4-496E-9BBE-6F49A3C6C569.html</loc>
                                             <lastmod>2024-09-09T06:28:18</lastmod>
                                             <title>1.1.1.1.4.5.18 tmcRpe_HFIParameters_s Struct</title>
                                             <description>C typedef struct { float32_t pulseAmplitude; /* Pulse amplitude */ } tmcRpe_HFIParameters_s; Summary Define the pulse amplitude of the HFI signal for the ZS/MT Hybrid position estimator module. ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-D3037FB0-D2D8-4DAD-8982-9C3653254BE9.html</loc>
                                       <lastmod>2024-09-13T04:04:09</lastmod>
                                       <title>1.1.1.1.4.6 IPD API Reference</title>
                                       <description>This section describes the API references for the initial position detection module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-3D69606D-A927-4597-BED3-D2419BB3E737.html</loc>
                                             <lastmod>2024-09-10T09:18:59</lastmod>
                                             <title>1.1.1.1.4.6.1 mcIpdI_InitialPositionDetectInit</title>
                                             <description>C /* Initialize initial position detection module */ void mcIpdI_InitialPositionDetectInit(tmcIpd_ModuleData_s * const pModule); Summary This function initializes the initial position detection(IPD) ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-658E38E5-204B-43FA-A424-9DC600A5A250.html</loc>
                                             <lastmod>2024-09-10T09:18:33</lastmod>
                                             <title>1.1.1.1.4.6.2 mcIpdI_InitialPositionDetectEnable</title>
                                             <description>C /* Enable initial position detection */ void mcIpdI_InitialPositionDetectEnable(tmcIpd_ModuleData_s * const pModule); Summary This function enables the initial position detection(IPD) module. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-96E5605A-3822-4E52-8DBE-677FD2636AD9.html</loc>
                                             <lastmod>2024-09-10T09:24:10</lastmod>
                                             <title>1.1.1.1.4.6.3 mcIpdI_InitialPositionDetect</title>
                                             <description>C /* Perform initial position detection */ void mcIpdI_InitialPositionDetect(tmcIpd_ModuleData_s * const pModule); Summary This function performs initial position detection. Description This function ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-E398D557-DFBD-4AD1-9582-03934F04CD94.html</loc>
                                             <lastmod>2024-09-10T09:18:47</lastmod>
                                             <title>1.1.1.1.4.6.4 mcIpdI_InitialPositionDetectDisable</title>
                                             <description>C /* Disable initial position detection module */ void mcIpdI_InitialPositionDetectDisable(tmcIpd_ModuleData_s * const pModule); Summary This function disables the initial position detection module. ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-10EC98C6-3434-43A1-99AC-C04D3DB7E30F.html</loc>
                                             <lastmod>2024-09-10T09:19:10</lastmod>
                                             <title>1.1.1.1.4.6.5 mcIpdI_InitialPositionDetectReset</title>
                                             <description>C /* Reset initial position detection module */ void mcIpdI_InitialPositionDetectReset(tmcIpd_ModuleData_s *pModule); Summary This function resets the initial position detection module. Description ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-A7E56BB4-8020-48F4-A513-5759BECBFC45.html</loc>
                                             <lastmod>2024-09-10T07:14:02</lastmod>
                                             <title>1.1.1.1.4.6.6 tmcIpd_Input_s Struct</title>
                                             <description>C typedef struct { float32_t iA; /* Phase A current */ float32_t iB; /* Phase B current */ float32_t iC; /* Phase C current */ float32_t uBus; /* DC bus voltage */ } tmcIpd_Input_s; Summary Initial ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-0DEE5DE1-6F7B-42EC-BA03-DC4927186E7F.html</loc>
                                             <lastmod>2024-09-10T07:04:17</lastmod>
                                             <title>1.1.1.1.4.6.7 tmcIpd_Output_s Struct</title>
                                             <description>C typedef struct { int16_t duty[3u]; /* PWM duty cycle array */ float32_t phi; /* Phase angle */ bool ready; /* Module readiness flag */ } tmcIpd_Output_s; Summary Initial position detection (IPD) ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-8EAA671A-9DCF-47E1-8B38-11D02115EC1F.html</loc>
                                             <lastmod>2024-09-10T07:04:10</lastmod>
                                             <title>1.1.1.1.4.6.8 tmcIpd_ModuleData_s Struct</title>
                                             <description>C typedef struct { tmcIpd_Input_s dInput; /* Input structure */ tmcIpd_Parameters_s dParameter; /* Parameters structure */ tmcIpd_Output_s dOutput; /* Output structure */ void * pStatePointer; /* ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-F1F5D615-D875-4EFA-87FA-F2DB0F023128.html</loc>
                                             <lastmod>2024-09-10T07:04:23</lastmod>
                                             <title>1.1.1.1.4.6.9 tmcIpd_Parameters_s Struct</title>
                                             <description>C typedef struct { float32_t uPulse; /* Pulse amplitude */ float32_t tPulse; /* Pulse duration */ float32_t tPeriod; /* Pulse period */ float32_t fsInHertz; /* PWM frequency in Hertz */ uint16_t ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-B6A3C0CD-E527-48B2-A454-3F3CCE8AEAF4.html</loc>
                                       <lastmod>2024-09-13T04:26:22</lastmod>
                                       <title>1.1.1.1.4.7 Voltage Measurement API Reference</title>
                                       <description>This section describes the API references for the voltage calculation module.</description>
                                       <urls>
                                          <url>
                                             <loc>GUID-C6AA53AD-A122-475B-835F-3B48BD2E60B5.html</loc>
                                             <lastmod>2024-08-05T04:34:07</lastmod>
                                             <title>1.1.1.1.4.7.1 mcVolI_VoltageCalculationInit</title>
                                             <description>C /* Initialize voltage calculation module */ void mcVolI_VoltageCalculationInit( tmcVol_ModuleData_s * const pModule ) Summary Initializes the voltage calculation module. Description This function ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-6BC2E275-8D1B-447A-BE9B-CB58B890C838.html</loc>
                                             <lastmod>2024-08-05T04:52:32</lastmod>
                                             <title>1.1.1.1.4.7.2 mcVolI_VoltageCalculation</title>
                                             <description>C /* Perform voltage calculation */ vvoid mcVolI_VoltageCalculation( tmcVol_ModuleData_s * const pModule ) Summary Executes the voltage calculation process Description This function reads the ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-00F676BC-46FD-45DB-A1E6-CBAB14783EA7.html</loc>
                                             <lastmod>2024-08-05T04:55:17</lastmod>
                                             <title>1.1.1.1.4.7.3 mcVolI_VoltageCalculationReset</title>
                                             <description>C /* Reset voltage calculation */ void mcVolI_VoltageCalculationReset( tmcVol_ModuleData_s * const pModule ) Summary Resets the voltage calculation module to initial state. Description This function ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-654A5735-9049-41D4-B1E9-18E6B8C2337F.html</loc>
                                             <lastmod>2024-08-12T09:59:16</lastmod>
                                             <title>1.1.1.1.4.7.4 tmcVol_Input_s Struct</title>
                                             <description>C typedef struct { uint16_t sensorInput; /* Voltage sensor input value. */ } tmcVol_Input_s; Summary DC bus voltage input structure. Description This structure is used to store ADC input values for ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-0566FC8E-7C36-4B1A-BF0A-5CDD617118DF.html</loc>
                                             <lastmod>2024-08-12T10:47:21</lastmod>
                                             <title>1.1.1.1.4.7.5 tmcVol_ModuleData_s Struct</title>
                                             <description>C typedef struct { tmcVol_Input_s dInput; /* Input ports */ tmcVol_Output_s dOutput; /* Output ports */ tmcVol_Parameters_s dParameters; /* User Parameters */ }tmcVol_ModuleData_s; Summary DC bus ...</description>
                                             <urls/>
                                          </url>
                                          <url>
                                             <loc>GUID-4100F7AC-8BEB-4CEC-B588-98903F783ADC.html</loc>
                                             <lastmod>2024-08-12T10:10:10</lastmod>
                                             <title>1.1.1.1.4.7.6 tmcVol_Output_s Struct</title>
                                             <description>C /* Floating point structure for voltage measurement output */ typedef struct { float32_t uBus; /* Voltage bus value. */ }tmcVol_Output_s; /* Fixed point structure for voltage measurement output */ ...</description>
                                             <urls/>
                                          </url>
                                       </urls>
                                    </url>
                                    <url>
                                       <loc>GUID-C4F47DBF-B88F-4147-A7D9-D8C69DFCEC07.html</loc>
                                       <lastmod>2024-09-12T10:28:49</lastmod>
                                       <title>1.1.1.1.4.8 mc_hardware_abstraction_api</title>
                                       <description>Enter a short description of your topic here (optional).</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-A09E5182-84A4-40CB-9732-FE12DAC559EC.html</loc>
                                       <lastmod>2024-09-12T10:31:57</lastmod>
                                       <title>1.1.1.1.4.9 mc_utilities_api</title>
                                       <description>Enter a short description of your topic here (optional).</description>
                                       <urls/>
                                    </url>
                                    <url>
                                       <loc>GUID-F3037440-0B95-4A3A-8BBC-61A03B757556.html</loc>
                                       <lastmod>2024-09-12T10:31:19</lastmod>
                                       <title>1.1.1.1.4.10 mc_key_manager_api</title>
                                       <description>Enter a short description of your topic here (optional).</description>
                                       <urls/>
                                    </url>
                                 </urls>
                              </url>
                           </urls>
                        </url>
                     </urls>
                  </url>
               </urls>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-42876005-92C2-4CC0-81FC-71368462D294.html</loc>
         <lastmod>2024-09-10T10:19:47</lastmod>
         <title>2 Harmony QSpin Motor Control</title>
         <description>Introduction The QSpin Motor Control Configuration referred as Harmony QSpin is an extension of the MPLAB® ecosystem for developing Microchip’s next-generation application firmware for motor control ...</description>
         <urls>
            <url>
               <loc>GUID-7AA80154-50EF-428B-9AC0-598B6BCB3272.html</loc>
               <lastmod>2024-03-19T07:31:22</lastmod>
               <title>2.1 Software Design</title>
               <description>This section briefly describes the software design of the motor control firmware generated from theHarmony Qspin.</description>
               <urls>
                  <url>
                     <loc>GUID-F8D4D059-6217-4066-BD8B-60DD5B0B9DF3_2.html</loc>
                     <lastmod>2023-07-24T09:26:16</lastmod>
                     <title>2.1.1 Field Oriented Control Implementation</title>
                     <description>The generated code from the Harmony QSpin intends to achieve following goals:</description>
                     <urls/>
                  </url>
               </urls>
            </url>
         </urls>
      </url>
      <url>
         <loc>GUID-05FBE3B7-EA31-4FD0-BA88-715B91E2D508.html</loc>
         <lastmod>2024-03-19T06:44:29</lastmod>
         <title>3 Microchip MPLAB® Harmony 3 Release Notes</title>
         <description>Rectify package yml</description>
         <urls/>
      </url>
      <url>
         <loc>GUID-5AE41BEF-D04E-41F6-AA77-5469CF13B183.html</loc>
         <lastmod>2023-11-07T17:22:10</lastmod>
         <title>4 License</title>
         <description>MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE ...</description>
         <urls/>
      </url>
      <url>
         <loc>GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html</loc>
         <lastmod>2022-04-04T12:20:47</lastmod>
         <title> Microchip Information</title>
         <description/>
         <urls>
            <url>
               <loc>GUID-7551DC67-D79D-4F0C-B56F-7B17E12400E0.html</loc>
               <lastmod>2022-07-05T07:23:16</lastmod>
               <title> The Microchip Website</title>
               <description>Microchip provides online support via our website at . This website is used to make files and information easily available to customers. Some of the content available includes:Product Support – Data ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-CDA512D8-0DE4-4672-8716-04CAC681CB38.html</loc>
               <lastmod>2022-07-05T07:27:49</lastmod>
               <title> Product Change Notification Service</title>
               <description>Microchip’s product change notification service helps keep customers current on Microchip products. Subscribers will receive email notification whenever there are changes, updates, revisions or ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-F05182E4-B102-4775-A746-1FF37F465312.html</loc>
               <lastmod>2022-07-05T07:29:30</lastmod>
               <title> Customer Support</title>
               <description>Users of Microchip products can receive assistance through several channels:Distributor or RepresentativeLocal Sales OfficeEmbedded Solutions Engineer (ESE)Technical Support Customers should contact ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-E8251634-7B15-4073-A103-5A5F128B8699.html</loc>
               <lastmod>2021-09-15T14:48:25</lastmod>
               <title> Microchip Devices Code Protection Feature</title>
               <description>Note the following details of the code protection feature on Microchip products:Microchip products meet the specifications contained in their particular Microchip Data Sheet.Microchip believes that ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html</loc>
               <lastmod>2021-09-14T20:44:40</lastmod>
               <title> Legal Notice</title>
               <description>This publication and the information herein may be used only with Microchip products, including to design, test, and integrate Microchip products with your application. Use of this information in any ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html</loc>
               <lastmod>2023-08-23T20:11:43</lastmod>
               <title> Trademarks</title>
               <description>The Microchip name and logo, the Microchip logo, Adaptec, AVR, AVR logo, AVR Freaks, BesTime, BitCloud, CryptoMemory, CryptoRF, dsPIC, flexPWR, HELDO, IGLOO, JukeBlox, KeeLoq, Kleer, LANCheck, ...</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-07985EED-D525-413B-AEFE-78B563328687.html</loc>
               <lastmod>2022-07-05T07:33:24</lastmod>
               <title> Quality Management System</title>
               <description>For information regarding Microchip’s Quality Management Systems, please visit</description>
               <urls/>
            </url>
            <url>
               <loc>GUID-02A694CF-88A5-4ADA-8785-7EEEC62D66EA.html</loc>
               <lastmod>2022-07-05T07:34:52</lastmod>
               <title> Worldwide Sales and Service</title>
               <description>AMERICASASIA/PACIFICASIA/PACIFICEUROPE Corporate Office 2355 West Chandler Blvd. Chandler, AZ 85224-6199 Tel: 480-792-7200 Fax: 480-792-7277 Technical Support: Web Address: Atlanta Duluth, GA Tel: ...</description>
               <urls/>
            </url>
         </urls>
      </url>
   </urls>
</publication>
