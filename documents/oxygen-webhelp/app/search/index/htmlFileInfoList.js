define(function () {
return ["GUID-00D908BD-39D6-4F9C-A3FA-F1B601130140.html@@@3.3.22.5 mcPwmI_PulseWidthModulationReset@@@C /* Reset PWM modulator */ void mcPwmI_PulseWidthModulationReset ( const tmcPwm_Parameters_s * const pParameters ) Summary Resets the PWM modulator.. Description This function is used to reset the...","GUID-00F676BC-46FD-45DB-A1E6-CBAB14783EA7.html@@@3.7.3 mcVolI_VoltageCalculationReset@@@C /* Reset voltage calculation */ void mcVolI_VoltageCalculationReset ( tmcVol_ModuleData_s * const pModule ) Summary Resets the voltage calculation module to its initial state. Description This...","GUID-01B46490-213A-4272-8195-738256105928.html@@@2.2.1.5 Voltage Measurement and Diagnosis@@@Voltage sensing in Field-Oriented Control (FOC) is a critical process that involves measuring the motor&apos;s DC bus voltage to ensure that voltage limits are not exceeded and that the motor control model...","GUID-0256E1A0-2671-49D3-A050-8615A3C423A5.html@@@3.11.6 Q15_RIGHT_SHIFT Macro@@@C #define Q15_RIGHT_SHIFT( x, y) (int16_t)( x &gt;&gt; y ) Summary Performs right bit shift operation on a Q15 fixed-point format value. Description This macro performs right bit shift operation on a Q15...","GUID-0463A556-2932-4B68-8A08-D7E81EE71225.html@@@3.8.11 mcHalI_AdcCallBackRegister@@@C /* ADC conversion complete interrupt callback function */ void mcHalI_AdcCallBackRegister ( ADC_CALLBACK callback, uintptr_t context ) Summary This function registers a callback function to be...","GUID-04C38070-686B-47B2-92B4-277FB5A980FC.html@@@2.2.1.7 Data Monitoring@@@Data monitoring enables advanced real-time tracking and calibration of embedded systems. With Harmony QSpin, users can select the Data Monitoring Suite to observe and fine-tune system performance...","GUID-051B4D0D-339E-4FFC-AB70-B5B3BF947417.html@@@3.3.20 Motor Parameters API Reference@@@This section describes the API references for the motor parameter configuration module...","GUID-0566FC8E-7C36-4B1A-BF0A-5CDD617118DF.html@@@3.7.5 tmcVol_ModuleData_s Struct@@@C typedef struct { tmcVol_Input_s dInput; /* Input ports */ tmcVol_Output_s dOutput; /* Output ports */ tmcVol_Parameters_s dParameters; /* User Parameters */ }tmcVol_ModuleData_s; Summary DC bus...","GUID-05D415E6-5803-4A20-91D5-8693A823D50D.html@@@3.2.9 tmcCur_ModuleData_s Struct@@@C typedef struct { tmcCur_Input_s dInput; /* ADC input parameter structure */ tmcCur_Output_s dOutput; /* Structure for output current data */ tmcCur_Parameters_s dParameters; /* Structure for motor...","GUID-05FBE3B7-EA31-4FD0-BA88-715B91E2D508.html@@@6 Microchip MPLAB\u00AE Harmony 3 Release Notes@@@Harmony QSpin Updates Motor Module GUI Update in QSpin Enhanced graphical interface for improved usability and efficiency. Revised and extended module documentation for better clarity Added support...","GUID-064598B7-AEC5-4F55-B8FD-A08D073B9CBE.html@@@3.4.4 mcRpcI_RotorPositionCalcDisable@@@C /* Disable rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcDisable( tmcRpc_Parameters_s * const pParameters ) Summary Disables the rotor position calculation module...","GUID-07442475-DDE1-418E-BA0B-94B807789185.html@@@3.3.18.1 mcFlxI_FluxControlInit@@@C /* Initialize flux control module */ void mcFlxI_FluxControlInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the flux control module Description This function initializes the flux...","GUID-074A0B6E-2F55-48D4-9597-C94198261D9A.html@@@2.2.3.1 Setting PWM Interface@@@Field-Oriented Control (FOC) involves generating three-phase voltages to create stator flux, which interacts with the rotor flux to produce motor torque. For more details, refer to Field Oriented...","GUID-09303D23-D377-44CB-83E7-4709D2931CC2.html@@@3.3.24 Speed Control API Reference@@@This section describes the API references for the speed control module...","GUID-0AD04A29-0AAD-4E91-86DB-BB865B50E8A5.html@@@3.4.2 mcRpcI_RotorPositionCalcEnable@@@C /* Enable rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcEnable( tmcRpc_Parameters_s * const pParameters ) Summary Enables the rotor position estimation module Description...","GUID-0B134E27-482C-48C3-8895-2AF0AEAFBA99.html@@@2.2.2.1 Motor Parameters@@@Configuring PMSM (Permanent Magnet Synchronous Motor) parameters is crucial for achieving optimal Field-Oriented Control (FOC) performance. The QSpin uses these parameters to calculate default...","GUID-0B892C5C-D30A-4B74-92AE-B818623BD627.html@@@3.3.22.4 mcPwmI_PulseWidthModulationDisable@@@C /* Disable PWM modulator */ mcPwmI_PulseWidthModulationDisable( tmcPwm_Parameters_s * const pParameters ) Summary Disables the PWM modulator. Description This function disables the PWM modulator by...","GUID-0BA3B3DD-B3CF-40CB-999C-0D13BED79AFE.html@@@3.5.1 mcRpeI_RotorPositionEstimInit@@@C /* Initialize rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimInit( tmcRpe_Parameters_s * const pParameters ) Summary Initialize rotor position estimation module Description...","GUID-0DEE5DE1-6F7B-42EC-BA03-DC4927186E7F.html@@@3.6.7 tmcIpd_Output_s Struct@@@C typedef struct { int16_t duty[ 3u ]; /* PWM duty cycle array */ float32_t phi; /* Phase angle */ bool ready; /* Module readiness flag */ } tmcIpd_Output_s; Summary Initial position detection (IPD)...","GUID-0E2765C2-F3CB-4BAE-92EB-51E6D3054111.html@@@3.3.18.4 mcFlxI_FluxControlAuto@@@C /* Floating point flux control loop */ void mcFlxI_FluxControlAuto ( const tmcFlx_Parameters_s * const pParameters, const float32_t iDref, const float32_t iDact, const float32_t iDmax, float32_t *...","GUID-0E28D069-94DC-4B85-967B-CBF9A45BE525.html@@@2.1 Getting Started@@@Prerequisites Before you begin, ensure you have the following prerequisites: MPLAB X IDE : Download and install the latest version of MPLAB X Integrated Development Environment (IDE) from the...","GUID-0FB3F908-88EE-45CE-94F5-E97AF9049C9B.html@@@Microchip Information@@@...","GUID-0FB8D25F-8A50-40DF-86FC-C2629D39185C.html@@@3.3.18.17 tmcFlx_State_s Draft@@@C typedef struct { bool enable; /* Flag indicating flux control module enable status */ bool initDone; /* Flag indicating flux control module initialization status */ &lt;# if ( MCPMSMFOC_ENABLE_FW ==...","GUID-0FF51D48-63EA-4B3D-BACD-E664DD303B6E.html@@@3.11 Typedefs And Constants API Reference@@@...","GUID-108A98BA-893C-48C6-ADCE-E92BE9677506.html@@@3.3.23.2 mcRefI_ReferenceControlEnable@@@C /* Enable reference control module */ void mcRefI_ReferenceControlEnable( tmcRef_Parameters_s * const pParameters ) Summary Enables the reference control module. Description This function enables...","GUID-10A70183-A0DD-4FF0-A330-71BD5E157FD8.html@@@3.10.1 mcKeyI_KeyManagerInit@@@C /* Algorithms key initialization */ void mcKeyI_KeyManagerInit ( void ) Summary Key manager algorithms initialization Description This function initializes the key manager by setting the IPD and...","GUID-10B6F92B-50BA-46EF-B616-EEE4952D12F2.html@@@3.8.13 mcHal_DirectionIndication@@@C /* Set direction indication */ void mcHal_DirectionIndication ( void ) Summary Sets the direction indicator Description This function indicates the motor direction by toggling the LED configured for...","GUID-10EC98C6-3434-43A1-99AC-C04D3DB7E30F.html@@@3.6.5 mcIpdI_InitialPositionDetectReset@@@C /* Reset initial position detection module */ void mcIpdI_InitialPositionDetectReset (tmcIpd_ModuleData_s *pModule); Summary This function resets the initial position detection module. Description...","GUID-123EA696-ED60-4BE0-AB63-1099B11EEC84.html@@@3.3.19.3 mcFlyI_FlyingStart@@@C /* Perform flying start */ tmcTypes_StdReturn_e mcFlyI_FlyingStart( tmcFly_Parameters_s * const pParameters, const float32_t speed, const float32_t commandDirection, float32_t * const pIdref...","GUID-1247DA32-16EE-410F-8821-9996138029EC.html@@@2.2.1.2 Motor Control and Diagnosis@@@Proper and optimal control of a motor requires tuning various parameters such as PI controllers, PWM modulators, and other settings based on your specific project requirements. Refer to Field Oriented...","GUID-125F1A93-76CC-4BD7-BACA-01844FBD5F4F.html@@@Legal Notice@@@This publication and the information herein may be used only with Microchip products, including to design, test, and integrate Microchip products with your application. Use of this information in any...","GUID-144FAB56-2319-4EC8-B7C4-49C9351A39D1.html@@@3.5.2 mcRpeI_RotorPositionReady@@@C /* Check if rotor position estimation is ready */ bool mcRpeI_RotorPositionReady ( const tmcRpe_Parameters_s * const pParameters ); Summary Check the rotor position estimation status. Description...","GUID-162593F8-1D14-4EC0-AD7E-24B255074CF7.html@@@3.3.21.7 tmcSup_Parameters_s Struct@@@C typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Pointer to the motor parameters structure */ float32_t alignmentTime; /* Alignment time */ float32_t alignmentCurrent; /* Alignment current */...","GUID-163E3393-AEB0-47C7-B86B-C60C6D6D81E4.html@@@3.3.17 ROTOR_ANGLE_RAMP_RATE Macro@@@C #define ROTOR_ANGLE_RAMP_RATE (float32_t)( 1.0e-5 ) Summary Defines the open loop angle to close loop angle transition rate Description Defines the open loop angle to close loop angle transition...","GUID-1A9D4203-ACAD-4793-82BF-60FD69B34D43.html@@@3.9.10 mcUtils_ButtonResponse@@@C /* Button response Function */ void mcUtils_ButtonResponse (button_response_t * buttonResData, void (* buttonJob)( void )) Summary Button response Function. Description The function processes button...","GUID-1CBBC594-C546-4B17-9D91-5B4C8C4F6FBC.html@@@3.3.18.2 mcFlxI_FluxControlEnable@@@C /* Enable flux control module */ void mcFlxI_FluxControlEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the flux control module. Description This function enables the flux control...","GUID-1E90BC8A-58AE-4A2B-BD81-43D40B27AA5B.html@@@3.9.9 mcUtils_FloatToValueShiftPair@@@C /* Convert a float value to a fixed-point integer value */ void mcUtils_FloatToValueShiftPair ( const float32_t input, int16_t * const value, uint16_t * const shift ) Summary This function convert a...","GUID-1F179160-4999-469E-B460-078F770CD36F.html@@@3.3.19.5 mcFlyI_FlyingStartReset@@@C /* Reset flying start module */ void mcFlyI_FlyingStartReset( tmcFly_Parameters_s * const pParameters ) Summary Resets the flying start module. Description This function resets the flying start...","GUID-20614B72-FE37-4738-89D3-C0E4740BB4F4.html@@@3.5.5 mcRpeI_RotorPositionEstim@@@C /* Perform floating point rotor position estimation*/ void mcRpeI_RotorPositionEstim ( const tmcRpe_Parameters_s * const pParameters, const tmcTypes_AlphaBeta_s * pIAlphaBeta, const...","GUID-2096EBEA-DE6C-429A-83E1-31E22B84842B.html@@@3.3.22.7 tmcPwm_State_s Struct@@@C typedef struct { bool enable; /* Flag indicating PWM module enable status */ bool initDone; /* Flag indicating PWM module initialization status */ int16_t pwmPeriodCount; /* PWM period count value...","GUID-209C065D-A933-4946-A07E-F402D69AF9BC.html@@@3.3.21.2 mcSupI_OpenLoopStartupEnable@@@C /* Enable open loop start-up module */ void mcSupI_OpenLoopStartupEnable( tmcSup_Parameters_s * const pParameters ) Summary Enables the open loop start-up module. Description This function enables...","GUID-2109A4FB-BDA2-4CEF-8710-BAD27FA52143.html@@@3.3.1 mcFocI_FieldOrientedControlInit@@@C /* Initializes the FOC module */ void mcFocI_FieldOrientedControlInit( tmcFocI_ModuleData_s * const pModule ) Summary Initialize the Field Oriented Control (FOC) module Description This function...","GUID-21750586-F9F2-4E33-87FB-8F2994BF4744.html@@@Trademarks@@@The \u201CMicrochip\u201D name and logo, the \u201CM\u201D logo, and other names, logos, and brands are registered and unregistered trademarks of Microchip Technology Incorporated or its affiliates and/or subsidiaries in...","GUID-22299CE3-D3BD-4E0A-A2E3-3D10749DE067.html@@@3.5.17 tmcRpe_IPCParameters_s Struct@@@C typedef struct { float32_t pulseAmplitude; /* Pulse amplitude */ float32_t pulseDuty; /* Pulse duty cycle */ float32_t pulseDuration; /* Pulse duration */ } tmcRpe_IPCParameters_s; Summary Defines...","GUID-224C2527-80C6-44A9-8F12-84C7B0C1C1C7.html@@@3.3.23.3 mcRefI_ReferenceControl@@@C /* Floating point reference control */ void mcRefI_ReferenceControl ( tmcRef_Parameters_s * const pParameters, const float32_t command, float32_t * const pOut ) /* Fixed point reference control */...","GUID-22D13A63-C5A3-47AB-BBD0-53BCC0DF7A5D.html@@@3.9.3 mcUtils_PiLimitUpdate@@@C /* Updates the floating point PI control limits */ void mcUtils_PiLimitUpdate ( const float32_t Ymin, const float32_t Ymax, tmcUtils_PiControl_s * const pControl ) /* Updates the fixed point PI...","GUID-287AC9B3-1EF6-448C-BDA2-10EC808008C1.html@@@3.11.5 Q15_SCALE@@@C #define Q15_SCALE(value) (int16_t)( value * (float32_t)Q15_SCALE_FACTOR) Summary Convert the given value into the Q15 fixed-point format . Description The macro is used to convert the given value...","GUID-289C111D-66D2-4A1D-B1F7-7B3560BF423A.html@@@3.8.10 mcHalI_AdcEnable@@@C /* Enable ADC peripheral */ void mcHal_AdcEnable ( void ) Summary Enables the ADC peripheral Description This function enables the Analog-to-Digital Converter (ADC) peripheral with the specific ADC...","GUID-29D06553-EE7F-4EDC-92DF-17C19EE36334.html@@@3.3 Field Oriented Control API Reference@@@...","GUID-29E88A9B-3CEF-4FD0-ABE9-FF9D734060A5.html@@@3.3.25.8 tmcTor_Parameters_s Struct@@@C typedef struct { float32_t Kp; /* Proportional gain for torque control */ float32_t Ki; /* Integral gain for torque control */ float32_t dt; /* Time step for torque control */ void * pStatePointer...","GUID-2A7213F2-2D96-4D0D-984B-DABD731BC9A2.html@@@3.3.18.5 mcFlxI_FluxControlDisable@@@C /* Disable flux control module */ void mcFlxI_FluxControlDisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the flux control module. Description This function disables the flux...","GUID-2B778429-35E3-4F14-884D-8103662C810C.html@@@3.11.7 Q15_MULTIPLY_SAT Macro@@@C #define Q15_MULTIPLY_SAT(x, y) ({ \\ int32_t result = ((int32_t)(x) * (int32_t)(y)) &gt;&gt; 15U ; \\ if (result &gt; INT16_MAX) result = INT16_MAX; \\ else if (result &lt; INT16_MIN) result = INT16_MIN; \\...","GUID-2BAEAB52-6432-4429-8D0D-F07269D75782.html@@@3.11.12 Q14_RIGHT_SHIFT Macro@@@C #define Q14_RIGHT_SHIFT( x, y) (int16_t)( x &gt;&gt; y ) Summary Performs right bit shift operation on a Q14 fixed-point format value. Description This macro performs right bit shift operation on a Q14...","GUID-2C0CD558-A51D-43D7-9879-6C05B2946BDE.html@@@3.3.24.3 mcSpeI_SpeedControlManual@@@C /* Speed control - manual mode : floating point version */ void mcSpeI_SpeedControlManual ( const tmcSpe_Parameters_s * const pParameters, const float32_t Out ) /* Speed control - manual mode...","GUID-2CC7C7AD-A0B2-4FEF-8B9A-E4C20268EFF4.html@@@3.5.11 mcRpeI_CarrierSignalInjection@@@C /* Inject HF pulse to the DQ axis voltage */ void mcRpeI_CarrierSignalInjection (tmcRpe_Parameters_s * pParameters, tmcTypes_DQ_s * const pUdq ); Summary Inject HF pulse to the DQ axis voltage...","GUID-2D8E3700-A5FA-4894-B9E9-CB42E98374B0.html@@@3.5.4 mcRpeI_ParametersSet@@@C /* Set rotor position estimation parameters */ void mcRpeI_ParametersSet (tmcRpe_Parameters_s * const pParameters ) Summary This function sets the parameters for rotor position estimation module...","GUID-2DDD2C10-61B4-4794-9312-5C5BFA43F2E6.html@@@3.4.10 tmcRpc_ModuleData_s Struct@@@C typedef struct { tmcRpc_Input_s dInput; /* Rotor position calculation module input parameter structure */ tmcRpc_Output_s dOutput; /* Rotor position calculation control module output parameter...","GUID-2E524004-ED37-4174-9ECC-3075003F70A7.html@@@2.2.1.1 Start-up Configurator@@@The Harmony QSpin provides end users with the ability to configure the motor control software modules as per their project requirements. Start-up Configurator The sensorless position estimation...","GUID-2FCB98D5-D91A-4C48-929B-F1CF00229184.html@@@3.2.7 tmcCur_Parameters_s Struct@@@C /* Structure for current parameters: Floating point version */ typedef struct { float32_t adcToCurrentFactor; /* Factor for converting ADC values to current */ # if MCPMSMFOC_OFFSET_OOR == true...","GUID-35451F85-BBB3-4DF6-B3AC-00FB57657EFF.html@@@2.2 Harmony QSpin: PMSM FOC Modules@@@The Harmony QSpin framework provides a comprehensive set of modules designed to facilitate the development of motor control applications. These modules are categorized into software, hardware, and...","GUID-357B87E3-A639-4938-A64B-E64CA0391EE7.html@@@3.8.4 mcHalI_PwmCallbackRegister@@@C /* PWM fault interrupt callback function */ void mcHalI_PwmCallbackRegister ( TCC_CALLBACK callback, uintptr_t context ) Summary This function registers a callback function to be invoked upon a PWM...","GUID-35B47B7F-D398-415C-AB01-60E151AA0F8E.html@@@3.9.15 RL_500MS_10MS Macro@@@C #define RL_500MS_10MS 200u Summary Defines the debounce delay for button press detection Description This macro defines a constant value representing a count corresponding to 500 milliseconds...","GUID-35FB361D-8125-4A17-A370-B66C0E025D2B.html@@@3.2.10 OFFSET_SAMPLES Macro@@@C #define OFFSET_SAMPLES 128u Summary Defines the required no of samples for offset calculation Description Defines the required no of ADC current sensor samples for offset calculation,which is used...","GUID-37154732-4345-4D52-800B-5F1CE3C960CE.html@@@3.3.22.2 mcPwmI_PulseWidthModulationEnable@@@C /* Enable PWM modulator */ void mcPwmI_PulseWidthModulationEnable( tmcPwm_Parameters_s * const pParameters ) Summary Enable the PWM modulator Description This function enables the PWM modulator by...","GUID-37583C5E-D05D-4E96-8F6E-3C72BC407236.html@@@3.5.7 mcRpeI_MechanicalSpeedGet@@@C /* Get mechanical speed */ float32_t mcRpeI_MechanicalSpeedGet ( const tmcRpe_Parameters_s * const pParameters ); Summary Get mechanical angle Description This function is used to read the estimated...","GUID-38672EDD-FC31-4FB1-8134-5663F2B52855.html@@@3.3.23.4 mcRefI_ReferenceControlDisable@@@C /* Disable reference control module */ void mcRefI_ReferenceControlDisable( tmcRef_Parameters_s * const pParameters ) Summary Disables the reference control module. Description This function...","GUID-39CB4463-8D2C-49F3-8335-00B1A0426867.html@@@2.2.2.3 Voltage Source@@@This document provides guidance on setting up the voltage source module with Harmony QSpin. Voltage Source Graphical User Interface Steps for Setup In Harmony QSpin, the voltage source can be set up...","GUID-3D69606D-A927-4597-BED3-D2419BB3E737.html@@@3.6.1 mcIpdI_InitialPositionDetectInit@@@C /* Initialize initial position detection module */ void mcIpdI_InitialPositionDetectInit (tmcIpd_ModuleData_s * const pModule); Summary This function initializes the initial position detection(IPD)...","GUID-3DA07A53-9CF7-41FF-91A6-AE78E423E4B4.html@@@3.9.14 tUTIL_2DPlot_s Struct@@@C typedef struct { uint8_t dataPoints; /* Number of data points */ tUTIL_ 2 DPoints_s points[ 10u ]; /* An array of two-dimensional structure */ }tUTIL_ 2 DPlot_s; Summary Structure is used to...","GUID-3DC7124A-1783-446D-9B9F-01B07A3D5EAA.html@@@3.3.26.6 mcPosI_PositionControlReset@@@C /* Reset position control module */ void mcPosI_PositionControlReset( const tmcPos_Parameters_s * const pParameters ) Summary Resets the position control module to its initial state. Description...","GUID-3E2FBF20-295D-4355-8861-09A6F326FADB.html@@@3.4.5 mcRpcI_RotorPositionCalcReset@@@C /* Reset rotor position calculation module */ void mcRpcI_RotorPositionCalcReset ( const tmcRpc_Parameters_s * const pParameters ) Summary Reset rotor position calculation module. Description This...","GUID-3E4B291B-E17C-47FD-B8B0-865F74C611ED.html@@@3.5 Rotor Position Estimation API Reference@@@...","GUID-3E501283-7BEC-46E9-BC00-37E1FB8CD9AC.html@@@3.3.23.6 tmcRef_State_s Struct@@@C // Floating point structure defining the state of the reference control module. typedef struct { bool enable; /* Flag indicating reference control module enable status */ bool initDone; /* Flag...","GUID-3F2D95F4-FAE8-41FE-9D00-C554008BDC48.html@@@3.3.22.1 mcPwmI_PulseWidthModulationInit@@@C /* Initialize PWM modulator */ void mcPwmI_PulseWidthModulationInit( tmcPwm_Parameters_s * const pParameters ) Summary Initialize PWM modulator Description This function initializes the Pulse Width...","GUID-3F96E17E-B26E-46CD-BAA5-12BC3BD0A444.html@@@3.4.9 tmcRpc_Output_s Struct@@@C /* Data structure for Rotor Position Calculation (RPC) module output ports */ typedef struct { float32_t elecAngle; /* Calculated eletcrical angle in radians per sec*/ float32_t elecSpeed; /*...","GUID-3FC371D1-5F20-4FD5-BE9C-5E735208822F.html@@@2.2.1.6 Position Measurement and Diagnosis@@@Accurate rotor position measurement is essential in Field-Oriented Control (FOC) to ensure precise control of motor torque and speed. This process involves determining the rotor&apos;s position relative to...","GUID-4100F7AC-8BEB-4CEC-B588-98903F783ADC.html@@@3.7.6 tmcVol_Output_s Struct@@@C /* Floating point structure for voltage measurement output */ typedef struct { float32_t uBus; /* Voltage bus value. */ }tmcVol_Output_s; /* Fixed point structure for voltage measurement output */...","GUID-413554D3-B86C-4D72-B3BC-4561CF2F93DA.html@@@3.9.8 mcUtils_LinearRamp@@@C /* Linear ramp function */ void mcUtils_LinearRamp (int32_t * const input, const int32_t stepSize, const int32_t finalValue) Summary This function performs the linear ramp on a given input value...","GUID-42876005-92C2-4CC0-81FC-71368462D294.html@@@4 Motor Control Development Kits and Boards@@@Introduction Microchip provides a range of development kits and reference designs to help you simplify and accelerate your motor control application projects. With QSpin, you can easily select these...","GUID-45C508CB-2E07-48E8-9266-D67C0A132EFD.html@@@3.3.22.9 tmcPwm_Sector_e Enum@@@C typedef enum { SECTOR_ 1 , SECTOR_ 2 , SECTOR_ 3 , SECTOR_ 4 , SECTOR_ 5 , SECTOR_ 6 }tmcPwm_Sector_e; Summary Defines the sectors for Space Vector PWM Description This enumeration defines the...","GUID-46094F12-D8C4-496E-9BBE-6F49A3C6C569.html@@@3.5.18 tmcRpe_HFIParameters_s Struct@@@C typedef struct { float32_t pulseAmplitude; /* Pulse amplitude */ } tmcRpe_HFIParameters_s; Summary Define the pulse amplitude of the HFI signal for the ZS/MT Hybrid position estimator module...","GUID-47A969F5-FAE8-48B3-9EDC-AA05ADCAF95D.html@@@3.4.1 mcRpcI_RotorPositionCalcInit@@@C /* Initialize rotor position calculation(RPC) module */ void mcRpcI_RotorPositionCalcInit( tmcRpc_ModuleData_s * const pModule ) Summary Initialize rotor position calculation module. Description...","GUID-485F18C2-BF00-476D-ADA8-C0AC750D32EE.html@@@3.11.11 Q14_SCALE Macro@@@C #define Q14_SCALE(value) (int16_t)( value * (float32_t)Q14_SCALE_FACTOR) Summary Convert the given value into the Q14 fixed-point format . Description The macro is used to convert the given value...","GUID-49972E8B-70F4-4472-82E3-27EA85E1D5F4.html@@@3.3.22.8 tmcPwm_Parameters_s Struct@@@C /* PWM module parameter structure: Floating point version */ typedef struct { uint16_t pwmPeriodCount; /* PWM period count */ uint16_t deadTimeCount; /* Dead time count */ float32_t maxModIndex; /*...","GUID-4ACA687D-C6F6-422A-ACE3-C5EE61947232.html@@@3.5.16 tmcRpe_Parameters_s Struct@@@C /* PLL based rotor position estimation user paramters */ typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Motor parameters */ /** BEMF observer parameters */ float32_t Ke; /* BEMF observer gain...","GUID-4D3536DD-A4DC-42D6-9151-675D0E6F93B9.html@@@3.3.21.3 mcSupI_OpenLoopStartup@@@C /* Perform open loop start-up : Floating point version */ tmcTypes_StdReturn_e mcSupI_OpenLoopStartup ( const tmcSup_Parameters_s * const pParameters, float32_t direction, float32_t * const pIQref...","GUID-4D6F6A93-87D1-4ADD-B77D-9A427C0E2FE4.html@@@3.1.9 mcAppI_OverCurrentReactionIsr@@@C /* Over current reaction ISR */ void mcAppI_OverCurrentReactionIsr ( uint32_t status, uintptr_t context ); Summary Overcurrent Reaction Interrupt Service Routine (ISR). Description This function is...","GUID-4DD19DCE-B6EF-408C-8574-5B2258EAA616.html@@@2.1.3 Generate code with MCC@@@Steps to Generate Code Follow these steps to generate code using MCC: Click on the Generate button located in the MCC toolbar. Wait for the code generation process to complete. Once the code...","GUID-4DF573AB-1D23-4E78-B54F-055B21FD175D.html@@@3.11.10 Q15_ANGLE Macro@@@C #define Q15_ANGLE(value) (int16_t)( value * (float32_t)Q15_SCALE_FACTOR / (float32_t)ONE_PI) Summary Convert the given value into an angle represented in the Q15 fixed-point format. Description The...","GUID-4EB0DB3C-53FF-42AB-A70D-23F31FA6162B.html@@@3.11.2 tmcTypes_DQ_s Struct@@@C /* Structure representing DQ rotating frame quantities: Floating point version typedef struct { float32_t d; /* D axis quantity */ float32_t q; /* Q axis quantity */ }tmcTypes_DQ_s; /* Structure...","GUID-4FA41D54-4389-4A7B-858E-04F146E6E884.html@@@3.8.8 mcHalI_EncoderStart@@@C /* Start encoder pulses counter of quadarature decoder */ void mcHalI_EncoderStart ( void ) Summary Starts the quadrature decoder peripheral. Description The function initiates the quadrature...","GUID-5045BCD8-FA9F-454C-94EF-F61ED7F98D7A.html@@@3.1.7 mcAppI_MotorStartStop@@@C /* Motor Start/stop button scan */ void mcAppI_MotorStartStop ( void ) Summary Controls motor start and stop in response to button input Description This function scans the start/stop button and...","GUID-5082D82A-C230-4792-80EE-E31AB4A9039D.html@@@3.3.18.13 mcFlxI_MTPAEnable@@@C /* Enable MTPA module */ void mcFlxI_MTPAEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the Maximum Torque per Ampere (MTPA) module. Description This function enables the MTPA...","GUID-513B1473-8804-4954-A6A2-74A15B83D972.html@@@3.5.3 mcRpeI_RotorPositionEstimEnable@@@C /* Enable rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimEnable( tmcRpe_Parameters_s * const pParameters ) Summary Enable the rotor position estimation module Description...","GUID-521990F2-BCFF-4400-AD82-493C1C19CE85.html@@@3.3.25.6 mcTorI_TorqueControlReset@@@C /* Reset torque control module */ void mcTorI_TorqueControlReset ( const tmcTor_Parameters_s * const pParameters ) Summary Resets the torque control module. Description This function resets the...","GUID-52B528A5-613B-4C5C-B918-BE622754B69E.html@@@3.3.24.2 mcSpeI_SpeedControlEnable@@@C /* Enable speed control module */ void mcSpeI_SpeedControlEnable( tmcSpe_Parameters_s * const pParameters ) Summary Enables the speed control module. Description This function enables the speed...","GUID-52B92668-BB17-4CD7-9C7C-E1DC6A651633.html@@@3.2.8 tmcCur_States_s Struct@@@C /* Structure to hold the current measurement states: Floating point version */ typedef struct { uint8_t calibDone; /* Flag indicating calibration status */ uint16_t adcSampleCounter; /* Counter for...","GUID-52CA4CA5-55BC-423F-B79E-B814E889984B.html@@@2.2.1.3 Output Stage@@@The Output Stage module controls the relationship between the PI controller control signals and the generated PWM. Graphical User Interface Setting-up PWM to Control Ratio The FOC control to PWM ratio...","GUID-53F4F3FC-106D-47E8-8157-B011142BEB66.html@@@3.9.4 mcUtils_PiIntegralUpdate@@@C /* Updates the integral part of the floating point PI control */ void mcUtils_PiIntegralUpdate ( const float32_t value, tmcUtils_PiControl_s * const pControl ) /* Updates the integral part of the...","GUID-55B23CE1-53F4-4D3C-8843-2D3146234B06.html@@@3.1.4 mcAppI_AdcCalibrationIsr@@@C /* Motor Control application calibration */ void mcAppI_AdcCalibrationIsr ( uint32_t status, uintptr_t context ); Summary Motor phase current offset calibration ISR. Description This function is...","GUID-55B83109-5E0F-4799-A066-6CC19F8657BF.html@@@3.4.3 mcRpcI_RotorPositionCalc@@@C /* Perform rotor position calculation */ void mcRpcI_RotorPositionCalc ( tmcRpc_ModuleData_s * const pModule ) Summary Performs rotor position calculation. Description This function calculates the...","GUID-5677F685-AE70-4583-AC21-F8366E62CF09.html@@@3.3.19.2 mcFlyI_FlyingStartEnable@@@C /* Enable flying start module */ void mcFlyI_FlyingStartEnable( tmcFly_Parameters_s * const pParameters ) Summary Enables the flying start module. Description This function enables the flying start...","GUID-5709463C-9692-4C32-849D-71ED7F9D6F92.html@@@3.3.21.1 mcSupI_OpenLoopStartupInit@@@C /* Initialize open loop start-up module */ void mcSupI_OpenLoopStartupInit( tmcSup_Parameters_s * const pParameters ) Summary Initializes the open loop start-up module. Description This function...","GUID-578516D0-E8F5-40B9-AC07-AFD67B11773A.html@@@3.2.1 mcCurI_CurrentCalculationInit@@@C /* Current control initialization function */ void mcCurI_CurrentCalculationInit ( tmcCur_ModuleData_s * const pModule ) Summary Initialize the Motor phase current calculation function Description...","GUID-585161BC-93F5-4453-8886-661AA9BED607.html@@@3.3.6 mcFocI_FieldOrientedControlReset@@@C /* Reset Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlReset ( const tmcFocI_ModuleData_s * const pParameters ) Summary Resets the Field Oriented Control (FOC) module...","GUID-593B51D7-753B-4F45-907A-9A084230C6CB.html@@@2.2.3.3 Setting Position Interface@@@Field-Oriented Control (FOC) involves the alignment of rotor magnetic flux with respect to the stator&apos;s magnetic field. For more details, refer to Field Oriented Control . In sensored FOC, it is...","GUID-5941780D-A35E-4340-B2B6-327A4499AB6E.html@@@3.1.3 mcAppI_AdcFinishedIsr@@@C /* Interrupt tasks execution */ void mcAppI_AdcFinishedIsr ( uint32_t status, uintptr_t context ); Summary Execution of FOC Tasks. Description This function is specifically designed to execute...","GUID-5A8DB072-FDC0-4AA6-81AC-B630F4597777.html@@@3.11.13 Q14_MULTIPLY Macro@@@C #define Q14_MULTIPLY(x, y ) (int16_t)(( (int32_t)(x) * (int32_t)(y)) &gt;&gt; 14U ) Summary Performs multiplication of two fixed-point numbers represented in Q14 format. Description This macro performs...","GUID-5AE41BEF-D04E-41F6-AA77-5469CF13B183.html@@@7 License@@@MICROCHIP SOFTWARE IS PROVIDED SOLELY TO ASSIST YOU IN DEVELOPING PRODUCTS AND SYSTEMS THAT USE MICROCHIP PRODUCTS. DOWNLOAD AND/OR USE OF THE SOFTWARE REQUIRES THAT YOU ACCEPT THIS SOFTWARE LICENSE...","GUID-5CB16768-D98D-45EA-805F-343C7E896621.html@@@2.2.3 Peripheral Modules@@@This section provides a comprehensive guide on setting up the peripheral modules for your motor control application project using Harmony QSpin. Proper configuration of each peripheral component is...","GUID-5CCF6974-52BB-4407-9796-20C86F178C71.html@@@1.2 Field Oriented Control@@@The Field Oriented Control (FOC) is the conventional control scheme for permanent-magnet synchronous motors. It generally results in smoother torque, slightly higher efficiency, and higher...","GUID-5CF7F04B-63D2-447C-B69E-00A5C0DA5426.html@@@3.9.5 mcUtils_PiControlReset@@@C /* Resets the floating point PI control output. */ void mcUtils_PiControlReset ( const float32_t integral, tmcUtils_PiControl_s * const pControl) /* Resets the fixed point PI control output. */ void...","GUID-5D2A8B6E-F51B-4AA3-ACB0-59340D90C6EE.html@@@3.2.2 mcCurI_CurrentOffsetCalculation@@@C /* Function to calculate the current sensor offset */ tmcTypes_StdReturn_e mcCurI_CurrentOffsetCalculation ( tmcCur_ModuleData_s * const pModule ); Summary Calculates the offset for the motor phase...","GUID-5D9A13C4-45FC-4744-B788-8853716E4AD8.html@@@3 Harmony QSpin API Reference@@@...","GUID-5E93609B-AF17-4BCD-B56C-EEF3490548B4.html@@@3.3.24.7 tmcSpe_State_s Struct@@@C typedef struct { bool enable; /* Flag indicating Speed control module enable status */ bool initDone; /* Flag indicating Speed control module initialization status */ tmcUtils_PiControl_s...","GUID-602BBD41-97CB-4BA2-9BAE-13C156799A9B.html@@@3.2.3 mcCurI_CurrentCalculation@@@C /* Function to calculate the phase currents */ void mcCurI_CurrentCalculation ( tmcCur_ModuleData_s * const pModule ) Summary Calculate the Motor phase currents Description This function reads the...","GUID-60DDB34A-7CBA-4DE1-814C-88D432196E35.html@@@2 Harmony QSpin - PMSM FOC@@@PMSM FOC, or Field Oriented Control, is an advanced control technique designed to optimize the performance of Permanent Magnet Synchronous Motors (PMSMs). This method achieves precise control of the...","GUID-61726369-80C4-446E-94CF-BF9876134B6F.html@@@3.3.24.6 mcSpeI_SpeedControlDisable@@@C /* Disable speed control module */ void mcSpeI_SpeedControlDisable( tmcSpe_Parameters_s * const pParameters ) Summary Disables the speed control module. Description This function disables the speed...","GUID-61ABC3CE-FDB9-4F16-A372-751DEE786042.html@@@3.3.18.8 mcFlxI_FluxWeakeningEnable@@@C /* Enable flux weakening module */ void mcFlxI_FluxWeakeningEnable( tmcFlx_Parameters_s * const pParameters ) Summary Enables the flux weakening module. Description This function enables the flux...","GUID-62CA7E13-B0D2-4DF9-9DF0-ECFBECB01BAC.html@@@3.3.22 PWM API Reference@@@This section describes the API references for the PWM modulator...","GUID-63CC34B5-204B-4DAA-86A6-CD6E9EDFE07E.html@@@3.3.3 mcFocI_FieldOrientedControlSlow@@@C /*Execute Field Oriented Control (FOC) slow loop */ void mcFocI_FieldOrientedControlSlow ( const tmcFocI_ModuleData_s * const pParameters ) Summary Executes the slow loop of the FOC algorithm...","GUID-6545E6DB-3FC9-4A9C-8CE4-B3CC86712283.html@@@4.1 Setting up Custom Board@@@When working with Field-Oriented Control (FOC), using a custom board is often essential. A custom board allows you to tailor the hardware to your specific requirements, providing better insight into...","GUID-654A5735-9049-41D4-B1E9-18E6B8C2337F.html@@@3.7.4 tmcVol_Input_s Struct@@@C typedef struct { uint16_t sensorInput; /* Voltage sensor input value. */ } tmcVol_Input_s; Summary DC bus voltage input structure. Description This structure is used to store ADC input values for DC...","GUID-658E38E5-204B-43FA-A424-9DC600A5A250.html@@@3.6.2 mcIpdI_InitialPositionDetectEnable@@@C /* Enable initial position detection */ void mcIpdI_InitialPositionDetectEnable (tmcIpd_ModuleData_s * const pModule); Summary This function enables the initial position detection(IPD) module...","GUID-65E9E132-9999-4EAE-B258-B9FB4825CFC8.html@@@2.1.1 Create a new MPLAB\u00AE Harmony v3 project using MCC@@@This section offers a step-by-step guide to create a new application project...","GUID-6774DC6D-FDB0-4AA1-99F5-306B95F83298.html@@@3.1.5 mcAppI_1msTasksHandler@@@C /*1 ms tasks handler */ void mcAppI_1msTasksHandler ( void ) Summary Manages tasks to be executed every 1 millisecond. Description This function executes motor control slow loop tasks at a...","GUID-6823E2B6-2607-45AA-96B7-A8A902E0A5EE.html@@@3.5.6 mcRpe_RotorPostionOffsetCalc@@@C /* Rotor position offset calculation */ void mcRpe_RotorPostionOffsetCalc ( const tmcRpe_Parameters_s * const pParameters, float32_t * const pF32Offset ) Summary Calculation of rotor position...","GUID-69AE6307-6B26-4028-96A6-DDD234BF3357.html@@@3.3.16 tmcFoc_FocState_e Enum@@@C typedef enum { &lt;# if ( MCPMSMFOC_POSITION_CALC_ALGORITHM != &apos;SENSORED_ENCODER&apos; ) && ( MCPMSMFOC_ENABLE_FLYING_START == true ) &gt; FocState_FlyingStart, /* State for flying start */ &lt;/# if &gt...","GUID-6AB765CD-3B0D-4A9D-9786-FAD686CEFF77.html@@@3.3.18.14 mcFlxI_MTPA@@@C /* MTPA control */ void mcFlxI_MTPA( tmcFlx_Parameters_s * const pParameters, const tmcTypes_DQ_s * const pIdq, float32_t * const pIdref ) Summary Executes Maximum Torque per Ampere (MTPA) control...","GUID-6B960208-C6B6-46BA-BE50-5E837312BE44.html@@@3.11.1 tmcTypes_StdReturn_e Enum@@@C typedef enum { StdReturn_Progress, /* Operation in progress */ StdReturn_Success, /* Operation successful */ StdReturn_Fail, /* Operation failed */ StdReturn_Complete /* Operation completed */...","GUID-6B99ABD1-D79A-48A3-9E4E-8454083A026B.html@@@3.5.12 mcRpeI_RotorPositionEstimReset@@@C /* Reset rotor position estimation module */ void mcRpeI_RotorPositionEstimReset ( const tmcRpe_Parameters_s * const pParameters ) Summary Reset the rotor position estimation module. Description...","GUID-6BC2E275-8D1B-447A-BE9B-CB58B890C838.html@@@3.7.2 mcVolI_VoltageCalculation@@@C /* Perform voltage calculation */ void mcVolI_VoltageCalculation ( tmcVol_ModuleData_s * const pModule ) Summary Executes the voltage calculation process Description This function reads the measured...","GUID-6BC8E1E3-68B6-4B30-B8D5-28A05D91E971.html@@@3.11.4 tmcTypes_ABC_s Struct@@@C /* Structure representing ABC phase quantities: Floating point version typedef struct { float32_t a; /* Phase A quantity */ float32_t b; /* Phase B quantity */ float32_t c; /* Phase C quantity */...","GUID-6C1A67BA-B382-4884-B661-AF3F0BA36D3E.html@@@3.3.4 mcFocI_FieldOrientedControlFast@@@C /* Execute Field Oriented Control (FOC) fast loop tasks */ oid mcFocI_FieldOrientedControlFast ( tmcFocI_ModuleData_s * const pModule ) Summary Executes the fast loop tasks of the FOC algorithm...","GUID-6D1964FA-2BB0-48EA-A331-B0B04102E7CB.html@@@3.3.24.8 tmcSpe_Parameters_s Struct@@@C typedef struct { float32_t Kp; /* Proportional gain */ float32_t Ki; /* Integral gain */ float32_t Ymax; /* Maximum motor current */ float32_t dt; /* PWM period */ void * pStatePointer; /* Pointer...","GUID-6EC2A9BD-E456-4FD8-ADDA-87FBC8023291.html@@@2.1.2 Qspin Motor Control Configuration@@@The Harmony Qspin Motor Control is an intuitive graphical tool for developing motor control application software...","GUID-722DD900-7015-4646-B69F-20C19A60A801.html@@@3.1 Application API Reference@@@...","GUID-731D588E-F7D0-4AF2-B8DB-6FCE9DBEE75A.html@@@3.3.9 mcFoc_ParkTransformation@@@C /* Floating point Park Transformation */ void mcFoc_ParkTransformation ( const tmcTypes_AlphaBeta_s * const pAlphaBeta, const float32_t sine, const float32_t cosine, tmcTypes_DQ_s * const pDQ ) /*...","GUID-735ED8C3-91B8-475D-A6EF-383D57B4D303.html@@@3.3.21.8 tmcSup_State_e Enum@@@C typedef enum { startupState_Align, /* Start-up sequence is in initial field alignment state. */ startupState_Ramp, /* Start-up sequence is in open loop ramp state. */ startupState_Stabilize /* The...","GUID-75F4A2F7-7ECC-45B5-B946-30571F19F3C6.html@@@3.8.7 mcHalI_EncoderStop@@@C /* Stop encoder pulses counter of quadarature decoder */ void mcHalI_EncoderStop ( void ) Summary Stops the quadrature decoder peripheral. Description The function stops the quadrature decoding...","GUID-77FA9439-ABF8-49F1-87B8-635A3267AD5E.html@@@3.10.2 mcKeyI_ValidationKeyGet@@@C /* Get algorithms key */ char * mcKeyI_ValidationKeyGet( const tmcKey_IPs_s ip) Summary Get the algorithms key. Description This function is used to read the validation key for a specified IP...","GUID-7ACAC663-5EDA-4EB2-AAED-8C5B415E7BF7.html@@@3.3.18.3 mcFlxI_FluxControlManual@@@C /* Floating point Flux control - Manual/ Tracking mode */ void mcFlxI_FluxControlManual ( const tmcFlx_Parameters_s * const pParameters, const float32_t Out ) /* Fixed point Flux control - Manual/...","GUID-7B8B8A8A-B02D-4660-9558-E4734D8E7A35.html@@@3.4.6 mcRpcI_MechanicalAngleGet@@@C /* Get mechanical angle */ float32_t mcRpcI_MechanicalAngleGet ( const tmcRpc_ModuleData_s * const pModule ) Summary Get the mechanical angle. Description This function is used to read the...","GUID-7BBD04D6-F959-4DB3-986C-62130FAEF07C.html@@@1 Introduction@@@The QSpin Motor Control Configuration referred to as Harmony QSpin is an extension of the MPLAB\u00AE ecosystem for developing Microchip\u2019s next-generation application firmware for motor control on...","GUID-7C52AFC8-2412-42FB-8DDA-D1FB947D5EE0.html@@@3.3.13 tmcFoc_Parameters_s Struct@@@C typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Structure for Motor parameters */ float32_t potInputToRef; /* Potentiometer to reference value factor */ }tmcFoc_Parameters_s; Summary Field...","GUID-7E74DD83-5D19-472C-9AB6-6B036837082A.html@@@3.3.18.12 mcFlxI_MTPAInit@@@C /* Initialize MTPA module */ void mcFlxI_FluxWeakeningInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the MTPA module Description This function initializes the MTPA module by...","GUID-7F47B1B7-2CB8-492F-B60E-E96EF6CAEDFA.html@@@3.3.23 Reference Control API Reference@@@This section describes the API references for the reference control module...","GUID-7F83E1D9-118A-46C8-AA6C-0797E6E90BD0.html@@@3.3.19.8 tmcFly_FlyingStartState_e Enum@@@C typedef enum tmcFly_FlyingStartState_e { FlyingStart_Initialize, /* Flying start sequence is in initialization state */ FlyingStart_Check, /* Flying start sequence is in transitioning state */...","GUID-80FABEF4-F279-4CA0-8542-6C9EED85FE8D.html@@@3.3.23.5 mcRefI_ReferenceControlReset@@@C /* Reset reference control module */ void mcRefI_ReferenceControlReset ( tmcRef_Parameters_s * const pParameters ) Summary Resets the reference control module. Description This function resets the...","GUID-82C7D359-5F86-41C6-8FBB-4E9AE7895961.html@@@3.3.22.10 DT_PADDING Macro@@@C #define DT_PADDING (int16_t) 12 Summary Defines the constant value used as padding for the dead time count in PWM calculations Description This macro defines a constant value used as padding for the...","GUID-83442A0B-90E1-4DD3-B198-B28709B6E1E3.html@@@3.3.26.8 tmcPos_Parameters_s Struct@@@C typedef struct { float32_t Kp; /* Proportional gain */ float32_t Ki; /* Integral gain */ float32_t dt; /* Time step */ void * pStatePointer; /* Pointer to state information */ } tmcPos_Parameters_s...","GUID-837642A5-D1F3-4283-96E6-540137B76556.html@@@3.9.11 UTIL_2DPlotRead@@@C /* Read from 2D plot */ float32_t UTIL_2DPlotRead ( tUTIL_ 2 DPlot_s * const p2DPlot, const float32_t xPoint ) Summary This function reads the data from 2D plot . Description This function reads and...","GUID-85B9E278-D8AE-4132-9904-24D72A113AD7.html@@@1.2.2 Rotor Position Sensing@@@The rotor position information is crucial to control the torque of the motor of an electric drive with Field Oriented Control. The following section describes different rotor position measurement...","GUID-8E33A93C-1843-48AF-81A9-56CF2B306859.html@@@2.2.1.2.1 Steps to Utilize Model-Based Design in Harmony QSpin@@@Follow the following steps to utilize Model-Based Design in Harmony QSpin. Note: Presently, this support is available only for PIC32MK, SAME70, SAME54, and SAMRH707 device families. 1. Install X2C...","GUID-8EAA671A-9DCF-47E1-8B38-11D02115EC1F.html@@@3.6.8 tmcIpd_ModuleData_s Struct@@@C typedef struct { tmcIpd_Input_s dInput; /* Input structure */ tmcIpd_Parameters_s dParameter; /* Parameters structure */ tmcIpd_Output_s dOutput; /* Output structure */ void * pStatePointer; /*...","GUID-8F6EF3ED-5D9F-4C2E-A1B3-AE3AA14B920F.html@@@3.1.6 mcAppI_DirectionReverse@@@C /* Direction reverse button scan */ void mcAppI_DirectionReverse ( void ) Summary Reverses motor direction in response to button input Description This function scans the direction change button and...","GUID-91452ED7-1AD8-4CAF-8CBD-51157DFB81A8.html@@@3.3.20.2 tmcMot_PMSM_s Struct@@@C typedef struct { float32_t PolePairs; /* Number of pole pairs */ float32_t RsInOhms; /* Per phase resistance in Ohms */ float32_t LdInHenry; /* Direct axis inductance in Henry */ float32_t...","GUID-91AF22E7-8E45-42B4-B737-6FAE9C58BB49.html@@@3.3.21.6 tmcSup_State_s Struct@@@C /* Structure defining the state parameters for open loop start-up: Floating point version */ typedef struct { bool enable; /* Flag indicating open loop start-up module enable status */ bool...","GUID-92ACB0C5-9954-44B5-8583-47F0E6960A32.html@@@3.3.8 mcFoc_ClarkeTransformation@@@C /* Clarke Transformation */ void mcFoc_ClarkeTransformation ( const tmcTypes_ABC_s * pABC, tmcTypes_AlphaBeta_s * const pAlphaBeta ) Summary Clarke Transformation Description This function performs...","GUID-9305E76E-942D-44E6-9DD2-A6049ABE3323.html@@@3.2 Current Measurement API Reference@@@...","GUID-93C92F24-67BF-47EF-9FC8-CB25B0448049.html@@@3.3.19 Flying Start API Reference@@@This section describes the API references for the flying start module...","GUID-93DFD1DF-A5E8-4903-8826-F92C94F3EEF2.html@@@3.3.26 Position Control API Reference@@@This section describes the API references for the position control module...","GUID-96E5605A-3822-4E52-8DBE-677FD2636AD9.html@@@3.6.3 mcIpdI_InitialPositionDetect@@@C /* Perform initial position detection */ void mcIpdI_InitialPositionDetect (tmcIpd_ModuleData_s * const pModule); Summary This function performs initial position detection. Description This function...","GUID-989E7AA5-599B-44EF-B07B-92CF360E8489.html@@@2.2.2.2 Analog Front End@@@The field-oriented control requires multiple analog signals, each requiring analog processing before the MCU can take it. Some of these parameters affect the firmware parameters. The Analog Front End...","GUID-98F5FAD7-9104-401C-8CBC-19FA27773206.html@@@3.3.18.10 mcFlxI_FluxWeakeningDisable@@@C /* Disable flux weakening module */ void mcFlxI_FluxWeakeningDisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the flux weakening module. Description This function disables the...","GUID-99144BCB-7558-4734-B9CF-A817991359B9.html@@@3.11.14 Q14_DIVISION Macro@@@C #define Q14_DIVISION( x, y) (int16_t)(((int32_t)x * (int32_t)Q14_SCALE_FACTOR ) / y ) Summary Performs division of two fixed-point numbers represented in Q14 format. Description This macro performs...","GUID-9B03A001-6B42-4830-A0A1-00C5F3312334.html@@@3.3.5 mcFocI_FieldOrientedControlDisable@@@C /* Disable Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlDisable( tmcFocI_ModuleData_s * const pParameters ) Summary Disable Field Oriented Control (FOC) module Description...","GUID-9B14E01D-A72F-4969-A64B-4A219642F3C7.html@@@3.3.10 mcFoc_InverseParkTransformation@@@C /* Floating point Inverse Park Transformation */ void mcFoc_InverseParkTransformation ( const tmcTypes_DQ_s * const pDQ, const float32_t sine, const float32_t cosine, tmcTypes_AlphaBeta_s * const...","GUID-9D230B6F-F9CC-439E-9E16-42AFD30EDB55.html@@@3.3.18.15 mcFlxI_MTPADisable@@@C /* Disable MTPA module */ void mcFlxI_MTPADisable( tmcFlx_Parameters_s * const pParameters ) Summary Disables the MTPA module. Description This function disables the MTPA module by linking the state...","GUID-9E379781-D122-4968-AD77-EE9819A8279C.html@@@3.10.4 tmcKey_IPs_s Enum@@@C typedef enum { KEY_IPD, KEY_ZSMT, KEY_MAX }tmcKey_IPs_s; Summary Defines the enumeration for key manager algorithms. Description This enumeration defines constants that represent different IP...","GUID-9F0534F6-7369-445E-960E-419575EB2399.html@@@3.5.8 mcRpeI_MechanicalAngleGet@@@C /* Get mechanical angle */ float32_t mcRpeI_MechanicalAngleGet ( const tmcRpe_Parameters_s * const pParameters ); Summary Get mechanical angle Description This function is used to read the estimated...","GUID-A09367B3-9AF4-4388-8AE9-15D50E3C8FF8.html@@@3.5.15 tmcRpe_State_s Struct@@@C /* Data structure for Rotor Position Estimation (RPE) module: Floating point version */ typedef struct { /** States */ bool enable; /* Flag indicating if the module is enabled */ bool initDone; /*...","GUID-A09E5182-84A4-40CB-9732-FE12DAC559EC.html@@@3.9 Utilities API Reference@@@...","GUID-A1EB5A47-ADAF-4976-A185-30BC9E81CE39.html@@@3.3.24.5 mcSpeI_SpeedControlReset@@@C /* Reset speed control module */ void mcSpeI_SpeedControlReset ( const tmcSpe_Parameters_s * const pParameters ) Summary Resets the speed control module. Description This function resets the speed...","GUID-A282C66C-7BE1-4E91-9785-6D434C5A9B44.html@@@3.3.2 mcFocI_FieldOrientedControlEnable@@@C /* Enable Field Oriented Control (FOC) module */ void mcFocI_FieldOrientedControlEnable( tmcFocI_ModuleData_s * const pParameters ) Summary Enable Field Oriented Control (FOC) module Description...","GUID-A3CF0663-3970-4597-98E9-4A0E7F0D864B.html@@@3.9.12 UTIL_2DPlotInitialize@@@C /* Initialize 2D plot */ void UTIL_2DPlotInitialize ( tUTIL_ 2 DPlot_s * const p2DPlot, const uint8_t dataPoints, const tUTIL_ 2 DPoints_s points[] ) Summary This function initializes a 2D plot...","GUID-A53CF31E-4DEB-4809-9CFD-62807A0A45DA.html@@@3.3.26.5 mcPosI_PositionControlDisable@@@C /* Disable position control module */ void mcPosI_PositionControlDisable( tmcPos_Parameters_s * const pParameters ) Summary Disables the position control module. Description This function disables...","GUID-A5963DEB-48DE-42A7-8082-87B2F421CC68.html@@@3.8.3 mcHalI_PwmInterruptEnable@@@C /* Enable PWM fault interrupt */ void mcHalI_PwmInterruptEnable ( void ) Summary Enables the PWM fault interrupt Description This function enables the PWM fault interrupt for the specified PWM...","GUID-A65163D4-265D-4655-A9A8-07F45D6D0D39.html@@@3.9.16 button_response_t Struct@@@C typedef struct { bool inputVal; /* Read value of the button input pin */ uint16_t state; /* State of the button */ uint16_t cnt; /* Count associated with button events */ } button_response_t...","GUID-A767C164-C52A-4AAF-AD7D-E5D367EE3C6B.html@@@3.3.24.1 mcSpeI_SpeedControlInit@@@C /* Initialize speed control module */ void mcSpeI_SpeedControlInit( tmcSpe_Parameters_s * const pParameters ) Summary Initializes the speed control module Description This function initializes the...","GUID-A7E56BB4-8020-48F4-A513-5759BECBFC45.html@@@3.6.6 tmcIpd_Input_s Struct@@@C typedef struct { float32_t iA; /* Phase A current */ float32_t iB; /* Phase B current */ float32_t iC; /* Phase C current */ float32_t uBus; /* DC bus voltage */ } tmcIpd_Input_s; Summary Initial...","GUID-A8977F73-5082-4516-9680-A8ADBF1BB483.html@@@3.3.21.5 mcSupI_OpenLoopStartupReset@@@C /* Reset the open loop start-up module */ void mcSupI_OpenLoopStartupReset ( const tmcSup_Parameters_s * const pParameters ) Summary Resets the open loop start-up parameters. Description This...","GUID-AB9D12C7-5A8E-4129-8474-0A9DF91637B4.html@@@3.8.9 mcHalI_DirectionButtonState@@@C /* Get direction button state */ bool mcHalI_DirectionButtonState ( void ) Summary Retrieve the state of the direction button. Description This function is used to read the status of the direction...","GUID-ABDB314F-3947-401B-AC7B-AE732C30ED8C.html@@@3.3.20.1 mcMotI_MotorParametersInit@@@C /* Motor parameters initialization */ void mcMotI_MotorParametersInit ( tmcMot_PMSM_s * const pParameters ) Summary Motor parameters initialization Description This function initializes the motor...","GUID-ABE2EBC0-B26B-4A42-B45A-659D9AE3CC08.html@@@3.3.26.4 mcPosI_PositionControlAuto@@@C /* Perform automatic position control */ void mcPosI_PositionControlAuto ( const tmcPos_Parameters_s * const pParameters, const float32_t ref, const float32_t act, float32_t * const pOut ) Summary...","GUID-AD04CE6C-AE48-4E08-9E9A-5C4C1E12CD9F.html@@@3.3.19.1 mcFlyI_FlyingStartInit@@@C /* Initialize flying start module */ void mcFlyI_FlyingStartInit( tmcFly_Parameters_s * const pParameters ) Summary Initialize the flying start module. Description This function initializes the...","GUID-ADA9E733-D754-440C-870C-667F52B33F79.html@@@3.3.21 Open Loop Startup API Reference@@@This section describes the API references for the open loop startup module...","GUID-ADCD5EBE-C9FD-460C-89AE-A5004E4A6279.html@@@3.3.19.7 tmcFly_Parameters_s Struct@@@C /* Structure defining the parameters for flying start operation */ typedef struct { float32_t dt; /* Sample time */ float32_t detectTime; /* Flying start detection time */ float32_t...","GUID-ADE7881E-AEEB-4EDC-B439-356982B16585.html@@@3.4 Rotor Position Calculation API Reference@@@...","GUID-AECEBEDD-CEA4-4BAA-BB38-642134FFFAFB.html@@@3.3.25.1 mcTorI_TorqueControlInit@@@C /* Initialize torque control module */ void mcTorI_TorqueControlInit( tmcTor_Parameters_s * const pParameters ) Summary Initializes the torque control module. Description This function initializes...","GUID-AF51A3A7-1219-4619-B394-3205BC80FCC6.html@@@3.9.1 mcUtils_TruncateAngle0To2Pi@@@C /* Truncate angle to 0 to 2pi */ void mcUtils_TruncateAngle0To2Pi ( float32_t * const angle ) Summary This function truncates the input angle to the range of 0 to 2\u03C0. Description This function...","GUID-B0960401-F15D-4A2F-9BE3-B2E7A2552467.html@@@3.3.25.3 mcTorI_TorqueControlAuto@@@C /* Torque control - auto mode : floating point version */ void mcTorI_TorqueControlAuto ( const tmcTor_Parameters_s * const pParameters, const float32_t iQref, const float32_t iQact, const float32_t...","GUID-B0B753AB-03CF-4363-9DF4-3CC3CEF4D84F.html@@@1.2.1 Current Measurement@@@The phase current information is crucial to control the torque of the motor of an electric drive with Field Oriented Control. The following section describes different current measurement principles...","GUID-B185103F-3C09-4558-9133-865113D55C68.html@@@3.3.28 DC_BUS_VOLTAGE_LIMIT Macro@@@C #define DC_BUS_VOLTAGE_LIMIT Q_SCALE( 0.5658032638 ) Summary Defined the DC bus voltage limit. Description This macro defines the DC bus voltage limit. Remarks None...","GUID-B27ED8D9-7C73-48CA-89C2-A4EDD18CC79D.html@@@3.3.20.3 LDMINUSLQ_VS_IS Macro@@@C #define LDMINUSLQ_VS_IS { \\ { 0.0f , 0.00032f }, \\ { 1.0f , 0.00032f }, \\ { 2.0f , 0.00032f }, \\ { 3.0f , 0.00032f }, \\ } Summary Defines the PMSM motor inductance characteristic curves. Description...","GUID-B29F400A-E501-4598-BF31-BE7C7EC28F31.html@@@2.2.1.2.1.1 Installing X2C Library@@@Pre-requisites Before proceeding with the installation, ensure you have the following software installed: MPLAB\u00AE X IDE MPLAB\u00AE XC Compilers Scilab 2023.1.0 Installation Steps for X2C Library Follow...","GUID-B5F89A81-EEFB-47A5-BFD0-D5B73BF13C53.html@@@3.3.18.6 mcFlxI_FluxControlReset@@@C /* Reset flux control module */ void mcFlxI_FluxControlReset ( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the flux control module. Description This function resets the flux...","GUID-B6A3C0CD-E527-48B2-A454-3F3CCE8AEAF4.html@@@3.7 Voltage Measurement API Reference@@@...","GUID-B8660A41-B563-4003-B915-27BB6244A6A3.html@@@3.3.25.7 tmcTor_State_s Struct@@@C typedef struct { bool enable; /* Flag indicating Torque module enable status */ bool initDone; /* Flag indicating Torque module initialization status */ tmcUtils_PiControl_s bPIController; /* PI...","GUID-B9A6FEA2-1E5E-49C9-A32A-55C790AE0DBD.html@@@3.3.18.11 mcFlxI_FluxWeakeningReset@@@C /* Reset flux weakening module */ void mcFlxI_FluxWeakeningReset ( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the flux weakening module. Description This function resets the flux...","GUID-B9C69650-15E9-4E89-BEA9-8C1DB5BE7857.html@@@3.3.26.2 mcPosI_PositionControlEnable@@@C /* Enable position control module */ void mcPosI_PositionControlEnable( tmcPos_Parameters_s * const pParameters ) Summary Enables the position control module. Description This function enables the...","GUID-BA7D6341-0C4C-4D61-AD07-932167CD8E87.html@@@3.3.22.3 mcPwmI_PulseWidthModulation@@@C /* PWM Modulator */ mcPwmI_PulseWidthModulation( const tmcPwm_Parameters_s * const pParameters, const float32_t uBus, const tmcTypes_AlphaBeta_s * const pUalphaBeta, int16_t * const pDuty ) Summary...","GUID-BAAF2EAA-217B-4AF7-A06B-6D16C67BC26E.html@@@3.10.3 tmcKey_Keys_s Struct@@@C typedef struct { char Keys[KEY_MAX][ 32u ]; /* A two-dimensional array that stores the algorithm keys for each IP */ }tmcKey_Keys_s; Summary Key manager module structure. Description This structure...","GUID-BAC35AA9-FEA8-4ABC-AB00-FCDD25781FC3.html@@@3.2.5 tmcCur_Input_s Struct@@@C typedef struct { uint16_t iaAdcInput; /* Phase_A ADC input current */ uint16_t ibAdcInput; /* Phase_B ADC input current */ }tmcCur_Input_s; Summary Motor phase currents input structure. Description...","GUID-C099E625-F92D-4904-BBFC-C2A70D9C8763.html@@@3.3.18.7 mcFlxI_FluxWeakeningInit@@@C /* Initialize flux weakening module */ void mcFlxI_FluxWeakeningInit( tmcFlx_Parameters_s * const pParameters ) Summary Initializes the flux weakening module Description This function initializes...","GUID-C0F33F98-171D-4E8B-8C1B-C038FB5FF19B.html@@@3.5.14 tmcRpe_TrackingLoopParams_s Struct@@@C typedef struct { float32_t foInHertz; /* Frequency in Hertz */ float32_t Keps; /* Keps parameter */ } tmcRpe_TrackingLoopParams_s; Summary Tracking loop parameters for the ZS/MT Hybrid position...","GUID-C1C929BC-0D12-40FB-B555-F28B23CB457E.html@@@1.1 Permanent Magnet Synchronous Motor@@@Construction The Permanent Magnet Synchronous Motor (PMSM) is the most preferred choice for motor control applications. Due to their permanent magnet rotor, they also have higher torque with smaller...","GUID-C25D79BD-A4F7-4399-AB03-5F1B07577255.html@@@3.3.26.7 tmcPos_State_s Struct@@@C typedef struct { bool enable; /* Flag indicating position control module enable status */ bool initDone; /* Flag indicating position control module initialization status */ tmcUtils_PiControl_s...","GUID-C417A0D7-E2FF-46C4-8A75-AF3D5265DD6D.html@@@3.3.18.9 mcFlxI_FluxWeakening@@@C /* Flux weakening control */ void mcFlxI_FluxWeakening ( const tmcFlx_Parameters_s * const pParameters, const tmcTypes_DQ_s * const pUDQ, const tmcTypes_AlphaBeta_s * const pEAlphaBeta, const...","GUID-C4F47DBF-B88F-4147-A7D9-D8C69DFCEC07.html@@@3.8 Hardware Abstraction API Reference@@@...","GUID-C514B7E3-A9B1-4CE7-BFFC-F156BD01F942.html@@@3.9.13 tUTIL_2DPoints_s Struct@@@C typedef struct { float32_t x; /* Represents the X-coordinate of the point in 2D space */ float32_t y; /* Represents the Y-coordinate of the point in 2D space */ }tUTIL_ 2 DPoints_s; Summary...","GUID-C6AA53AD-A122-475B-835F-3B48BD2E60B5.html@@@3.7.1 mcVolI_VoltageCalculationInit@@@C /* Initialize voltage calculation module */ void mcVolI_VoltageCalculationInit( tmcVol_ModuleData_s * const pModule ) Summary Initializes the voltage calculation module. Description This function...","GUID-CB69EAC9-E44C-42F1-8521-F40F4CE2BC62.html@@@5 Motor Control Example Projects@@@Introduction This section provides an overview of various motor control application projects developed using Microchip&apos;s 32-bit devices. These projects cover a wide range of motor control techniques...","GUID-CC6B2A0E-15D0-4529-A62A-73DD32380E78.html@@@3.8.5 mcHalI_InverterPwmEnable@@@C /* Enable three phase inverter */ void mcHalI_InverterPwmEnable ( void ) Summary Enable the three phase inverter Description This function activates the inverter PWM by enabling the specified PWM...","GUID-CCD0B03D-1E80-4DEF-AA80-89FC165E7A73.html@@@3.9.2 mcUtils_SineCosineCalculation@@@C /* Calculate sine and cosine value */ void mcUtils_SineCosineCalculation ( const float32_t angle, float32_t * const sine, float32_t * const cosine ) Summary This function calculate the sine and...","GUID-CD3370BD-89F2-4A75-A768-08A01673762C.html@@@3.3.14 tmcFoc_Output_s Struct@@@C /* Data structure for FOC output ports: Floating point version */ typedef struct { tmcTypes_AlphaBeta_s iAlphaBeta; /* Current components in the \u03B1\u03B2 reference frame */ tmcTypes_AlphaBeta_s...","GUID-CE34F7D3-4CD4-42F3-98A3-00F1EDC94D3D.html@@@3.8.1 mcHalI_StartStopButtonState@@@C /* Get start-stop button state */ bool mcHalI_StartStopButtonState ( void ) Summary Retrieve the state of the start-stop button. Description This function is used to read the status of the...","GUID-D22C9F7D-1B8A-466D-999B-9966F5373A83.html@@@3.1.1 mcAppI_ApplicationInit@@@C /* Motor Control Application initialization */ void mcAppI_ApplicationInit ( void ) Summary Initialize the Motor Control Application Description This function initializes the motor control...","GUID-D3037FB0-D2D8-4DAD-8982-9C3653254BE9.html@@@3.6 IPD API Reference@@@...","GUID-D30380EE-7150-40F0-8CD4-972379CEF307.html@@@2.2.1.4 Current Measurement and Diagnosis@@@Current sensing in Field-Oriented Control (FOC) is a critical process that involves measuring the motor&apos;s phase currents to accurately control the torque and speed of the motor. For more details...","GUID-D492A071-9A07-4FBF-9A8E-AE818BCCCBC1.html@@@3.3.23.1 mcRefI_ReferenceControlInit@@@C /* Initialize reference control module */ void mcRefI_ReferenceControlInit( tmcRef_Parameters_s * const pParameters ) Summary Initializes the reference control module. Description This function...","GUID-D5A4A321-E0FE-4F02-8BCD-10E75827BA97.html@@@3.4.11 tmcRpc_Input_s Struct@@@C /* Data structure for Rotor Position Calculation (RPC) module input ports */ typedef struct { uint16_t encPulseCount; /* Encoder pulse count value */ &lt;# if __PROCESSOR?matches( &quot;.*PIC32MK.*&quot; ) ==...","GUID-D609F4D2-E67E-4971-BC34-7448AE8310E3.html@@@3.8.12 mcHal_FaultIndicationSet@@@C /* Set fault indicator */ void mcHal_FaultIndicationSet ( void ) Summary Sets the fault indicator Description This function activates the fault indicator by setting the LED configured for fault...","GUID-D6FB7702-A7FC-422D-9833-923CDC87C6A4.html@@@3.3.18.16 mcFlxI_MTPAReset@@@C /* Reset MTPA module */ void mcFlxI_MTPAReset ( const tmcFlx_Parameters_s * const pParameters ) Summary Resets the MTPA module. Description This function resets the MTPA module. Precondition None...","GUID-D87B8D34-3F35-44BA-9627-7C6495951BDE.html@@@3.9.6 mcUtils_PiControlInit@@@C /* Initializes the PI control structure with the given parameters. */ void mcUtils_PiControlInit ( float32_t Kp, float32_t Ki, float32_t dt, tmcUtils_PiControl_s * const pControl) Summary...","GUID-D924D758-3530-47B1-B4B8-7D6D6362D28E.html@@@3.5.10 mcRpeI_ElectricalAngleGet@@@C /* Get electrical angle */ float32_t mcRpeI_ElectricalAngleGet ( const tmcRpe_Parameters_s * const pParameters ); Summary Get electrical angle Description This function is used to read the estimated...","GUID-DAB212D4-35AC-4316-8B51-728B693A284C.html@@@3.5.9 mcRpeI_ElectricalSpeedGet@@@C /* Get electrical speed */ float32_t mcRpeI_ElectricalSpeedGet ( const tmcRpe_Parameters_s * const pParameters ); Summary Get electrical speed Description This function is used to read the estimated...","GUID-DB126A0A-26F9-4927-BCBA-D987B1D5286F.html@@@3.9.17 GET_VALUE_SHIFT Macro@@@C #define GET_VALUE_SHIFT mcUtils_FloatToValueShiftPair Summary Convert a float value to a fixed-point integer value and its corresponding shift amount. Description This macro is an alias for the...","GUID-DC1BD475-C96E-44E6-8DF0-5C92AEC92844.html@@@3.5.13 mcRpeI_RotorPositionEstimDisable@@@C /* Disable rotor position estimation(RPE) module */ void mcRpeI_RotorPositionEstimDisable( tmcRpe_Parameters_s * const pParameters ) Summary Disable the rotor position estimation module Description...","GUID-DD84DDFF-C8EF-4B0B-BE37-A0E57D6972C4.html@@@3.8.2 mcHalI_PwmTimerStart@@@C /* Start PWM timer */ void mcHalI_PwmInterruptEnable ( void ) Summary Starts the PWM timer. Description This function starts the PWM timer for the specified PWM peripheral, initiating the PWM module...","GUID-DD95B01D-74C5-4333-ACFD-A1ACEB543D51.html@@@3.3.21.4 mcSupI_OpenLoopStartupDisable@@@C /* Disable open loop start-up module */ void mcSupI_OpenLoopStartupDisable( tmcSup_Parameters_s * const pParameters ) Summary Disables the open loop start-up module. Description This function...","GUID-DDC58770-5B56-48BC-845A-0F6B63F6BFEB.html@@@3.3.12 tmcFoc_State_s Struct@@@C /* Data structure for FOC state: Floating point version */ typedef struct { bool enable; /* Flag indicating FOC module enable status */ bool initDone; /* Flag indicating FOC module initialization...","GUID-E04E56E2-4D2D-4BBA-ABF1-F7EAE2D83E04.html@@@3.3.25.5 mcTorI_TorqueControlDisable@@@C /* Disable torque control module */ void mcTorI_TorqueControlDisable( tmcTor_Parameters_s * const pParameters ) Summary Disables the torque control module. Description This function disables the...","GUID-E0C15431-5B04-4C40-B4C1-A8818B405042.html@@@3.3.26.1 mcPosI_PositionControlInit@@@C /* Initialize position control module */ void mcPosI_PositionControlInit( tmcPos_Parameters_s * const pParameters ) Summary Initializes the position control module. Description This function...","GUID-E0E012F4-A6B5-4623-8752-EAD9048F8EB1.html@@@3.3.22.6 mcPwm_IntegerScale@@@C /* PWM scaling*/ int16_t mcPwm_IntegerScale ( const float32_t factor, int16_t input ) Summary Perform the PWM output scaling. Description This function scales an integer input by a floating-point...","GUID-E20B7479-1536-4D2B-8897-E559A65C6C6E.html@@@3.3.27 OPEN_TO_CLOSE_ANGLE_STEP_SIZE Macro@@@C #define OPEN_TO_CLOSE_ANGLE_STEP_SIZE (uint16_t)( 4 ) Summary Defined the step size for open to close angle transition. Description This macro defines the step size for transitioning from an open...","GUID-E3043FD6-1A8D-4CFA-8227-264EA1428F26.html@@@3.3.19.4 mcFlyI_FlyingStartDisable@@@C /* Disable flying start module */ void mcFlyI_FlyingStartDisable( tmcFly_Parameters_s * const pParameters ) Summary Disables the flying start module. Description This function disables the flying...","GUID-E398D557-DFBD-4AD1-9582-03934F04CD94.html@@@3.6.4 mcIpdI_InitialPositionDetectDisable@@@C /* Disable initial position detection module */ void mcIpdI_InitialPositionDetectDisable (tmcIpd_ModuleData_s * const pModule); Summary This function disables the initial position detection module...","GUID-E4C01FB0-8DC7-421A-942D-BFF47B480CFF.html@@@3.11.3 tmcTypes_AlphaBeta_s Struct@@@C /* Structure representing Alpha-Beta stationary frame quantities: Floating point version typedef struct { float32_t alpha; /* Alpha axis quantity */ float32_t beta; /* Beta axis quantity */...","GUID-E5EED18A-CF3E-4DA4-B210-950FDB8FA076.html@@@2.2.1 Software Modules@@@This section provides a comprehensive guide on setting up the hardware modules for your motor control application project using Harmony QSpin. Proper configuration of each software component is...","GUID-E71B6BE4-6000-4EC8-A9DC-25BE693E8EB5.html@@@3.3.25.2 mcTorI_TorqueControlEnable@@@C /* Enable torque control module */ void mcTorI_TorqueControlEnable( tmcTor_Parameters_s * const pParameters ) Summary Enables the torque control module. Description This function enables the torque...","GUID-E769C9AE-4561-49CF-AC66-F9D2AB4FB757.html@@@3.2.4 mcCurI_CurrentCalculationReset@@@C /* Function to reset phase current calculation */ void mcCurI_CurrentCalculationReset ( tmcCur_ModuleData_s * const pModule ) Summary Resets the current calculation module state and its parameters...","GUID-E8251634-7B15-4073-A103-5A5F128B8699.html@@@Microchip Devices Code Protection Feature@@@Note the following details of the code protection feature on Microchip products: Microchip products meet the specifications contained in their particular Microchip Data Sheet. Microchip believes that...","GUID-E9C802EF-0DA5-49C3-8B05-0B2375B11B0A.html@@@3.3.26.3 mcPosI_PositionControlManual@@@C /* Perform manual position control */ void mcPosI_PositionControlManual ( const tmcPos_Parameters_s * const pParameters, const float32_t Out ) Summary Perform the position control operation in...","GUID-EC287243-02F0-4A8E-9041-2118F92A2B69.html@@@3.8.6 mcHalI_InverterPwmDisable@@@C /* Disable three phase inverter */ void mcHalI_InverterPwmDisable ( void ) Summary Disable three phase inverter Description This function deactivates the inverter PWM by disabling the specified PWM...","GUID-ECAEE3D3-8897-42F2-87B1-415C15C736AC.html@@@3.3.24.4 mcSpeI_SpeedControlAuto@@@C /* speed control loop: floating point version */ void mcSpeI_SpeedControlAuto ( const tmcSpe_Parameters_s * const pParameters, const float32_t nref, const float32_t nact, float32_t * const pOut ) /*...","GUID-ECF85ABD-803D-4969-8737-C0CA3DBC62EA.html@@@2.2.2 Hardware Modules@@@This section provides a comprehensive guide on setting up the hardware modules for your motor control application project using Harmony QSpin. Proper configuration of each hardware component is...","GUID-ED65B907-1AE7-4826-B0B4-B2D868EEBC32.html@@@3.3.18.20 tmcFlx_FluxWeakening_s Struct@@@C typedef struct { bool enable; /* Flag indicating field weakening module enable status */ bool initDone; /* Flag indicating field weakening module initialization status */ bool feedForwardEnable; /*...","GUID-EDCF7049-2274-45F2-9AC9-DC83A186F78D.html@@@3.3.18.19 tmcFlx_MTPA_s@@@C /* Structure defining MTPA module state: Floating point version */ typedef struct { bool enable; /* Flag to enable or disable the MTPA operation */ bool initDone; /* Flag indicating MTPA module...","GUID-EE60D071-FCED-4FD3-82C6-D03A5B366044.html@@@3.3.15 tmcFoc_Input_s Struct@@@C /* Data structure for FOC input ports: Floating point version */ typedef struct { tmcTypes_ABC_s iABC; /* Structure for 3 Phase current parameters */ &lt;# if ( MCPMSMFOC_POSITION_CALC_ALGORITHM ==...","GUID-EE6D438E-7394-453E-B326-B9C9CE72A2F6.html@@@3.3.7 mcFocI_MotorDirectionChange@@@C /* Change motor direction */ void mcFocI_MotorDirectionChange ( const tmcFocI_ModuleData_s * const pParameters) Summary Changes the direction of the motor. Description This function changes the...","GUID-F15B117E-87D5-4B61-AB1D-568BBABBCFD2.html@@@3.4.8 tmcRpc_Parameters_s Struct@@@C /* Rotor Position Calculation (RPC) module parameter structure */ typedef struct { tmcMot_PMSM_s * pMotorParameters; /* Motor parameters structure */ float32_t dt; /* Time step or Sample time */ &lt;#...","GUID-F1F5D615-D875-4EFA-87FA-F2DB0F023128.html@@@3.6.9 tmcIpd_Parameters_s Struct@@@C typedef struct { float32_t uPulse; /* Pulse amplitude */ float32_t tPulse; /* Pulse duration */ float32_t tPeriod; /* Pulse period */ float32_t fsInHertz; /* PWM frequency in Hertz */ uint16_t...","GUID-F2BF521F-1F0B-4EF0-9C0B-CC80D86BA5B2.html@@@3.3.11 tmcFocI_ModuleData_s Struct@@@C typedef struct { tmcFoc_Input_s dInput; /* FOC control module input parameter structure */ tmcFoc_Output_s dOutput; /* FOC control module output parameter structure */ tmcFoc_Parameters_s...","GUID-F2C7364C-E569-4174-871C-98C42227C68B.html@@@3.3.18 Flux Control API Reference@@@This section describes the API references for the flux control module...","GUID-F3037440-0B95-4A3A-8BBC-61A03B757556.html@@@3.10 Key Manager API Reference@@@...","GUID-F357EFE7-06A7-410D-9D17-FBE6A6933412.html@@@2.2.3.2 Setting Analog Interface@@@Field-Oriented Control (FOC) involves controlling the stator currents of a motor to produce a rotating magnetic field, which in turn controls the rotor&apos;s position and speed. For more details, refer to...","GUID-F403F854-AF20-455B-B252-A62874111430.html@@@3.1.8 mcAppI_NonISRTasks@@@C /* Non-ISR tasks execution */ void mcAppI_NonISRTasks ( void ) Summary Executes non-interrupt service routine tasks Description This function executes motor control non-interrupt tasks at a...","GUID-F4C1C653-264A-4B9D-96BA-67009B03D64F.html@@@3.4.7 tmcRpc_State_s Struct@@@C /* Data structure for Rotor Position Calculation (RPC) */ typedef struct { bool enable; /* Flag indicating if the module is enabled */ bool initDone; /* Flag indicating if initialization is done */...","GUID-F54FDC17-9A9D-444E-A7DC-EC4250E1BB0D.html@@@3.3.23.7 tmcRef_Parameters_s Struct@@@C typedef struct { &lt;# if ( MCPMSMFOC_CONTROL_TYPE == &apos;SPEED_LOOP&apos; ) &gt; float32_t minimumRpm; /* Minimum RPM */ float32_t maximumRpm; /* Maximum RPM */ &lt;# if MCPMSMFOC_RAMP_PROFILES == &apos;Linear&apos; &gt...","GUID-F6CDCEFC-1A45-4BB6-8F00-86F681690831.html@@@3.11.9 Q15_DIVISION Macro@@@C #define Q15_DIVISION( x, y) (int16_t)(((int32_t)x * (int32_t)Q15_SCALE_FACTOR ) / y ) Summary Performs division of two fixed-point numbers represented in Q15 format. Description This macro performs...","GUID-F8004F01-8DE1-430D-81D2-60D9AB4412C1.html@@@3.1.2 mcAppI_ApplicationReset@@@C /* Application reset */ void mcAppI_ApplicationReset ( void ) Summary Resets the Motor Control Application Description This function resets the motor control software modules and initializes the...","GUID-F84A155C-A429-4F20-A761-DD7F009AA4C6.html@@@3.11.8 Q15_MULTIPLY Macro@@@C #define Q15_MULTIPLY(x, y ) (int16_t)(( (int32_t)(x) * (int32_t)(y)) &gt;&gt; 15U ) Summary Performs multiplication of two fixed-point numbers represented in Q15 format. Description This macro performs...","GUID-F87B6F26-5599-4975-BBD9-A17AF00B037A.html@@@3.3.25 Torque Control API Reference@@@This section describes the API references for the torque control module...","GUID-F8D4D059-6217-4066-BD8B-60DD5B0B9DF3.html@@@2.3 Firmware Architecture@@@The generated code from the Harmony QSpin intends to achieve following goals: to spin a motor based on simple user inputs to be modular and maintainable to be a clear example to Microchip customers...","GUID-F994CCEC-4C30-4DCA-AA56-B7B4A558680B.html@@@3.9.7 mcUtils_PiControl@@@C /* Executes the floating point PI control algorithm. */ void mcUtils_PiControl ( const float32_t error, tmcUtils_PiControl_s * const pControl ) /* Executes the fixed point PI control algorithm. */...","GUID-FA231C97-219C-4281-A35E-B8D029A75B35.html@@@3.3.19.6 tmcFly_State_s Struct@@@C /* Structure defining the state parameters for flying start operation */ typedef struct tmcFly_State_s { /** Switches */ bool enable; /* Flag indicating flying start module enable status */ bool...","GUID-FA97B252-9EBB-421C-BD36-03F1C9A30649.html@@@3.2.6 tmcCur_Output_s Struct@@@C typedef struct { tmcTypes_ABC_s iABC; /* A structure containing the calibrated motor phase currents */ uint8_t calibDone; /* A flag indicating the motor phase currents calibation status */...","GUID-FC3360CA-CEB3-454C-AAF3-75E267783933.html@@@3.3.18.18 tmcFlx_Parameters_s Struct@@@C typedef struct { float32_t Kp; /* Proportional gain for PI controller */ float32_t Ki; /* Integral gain for PI controller */ float32_t dt; /* Sampling time */ &lt;# if MCPMSMFOC_ENABLE_FW == true &gt...","GUID-FDB2A596-C8F6-46A3-8D75-3AE3B60B195C.html@@@3.3.25.4 mcTorI_TorqueControlManual@@@C /* Torque control - manual mode : floating point version */ void mcTorI_TorqueControlManual ( const tmcTor_Parameters_s * const pParameters, const float32_t Out ) /* Torque control - manual mode...","cshelp.html@@@Context Sensitive Help@@@..."];
});